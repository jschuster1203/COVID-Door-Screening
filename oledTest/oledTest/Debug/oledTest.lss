
oledTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025c  00800100  00001476  0000150a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080035c  0080035c  00001766  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001766  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c09  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aac  00000000  00000000  00003521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa7  00000000  00000000  00003fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00004f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000649  00000000  00000000  00005298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001261  00000000  00000000  000058e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006b42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 01 	jmp	0x308	; 0x308 <__ctors_end>
       4:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
       8:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
       c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      10:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      14:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      18:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      1c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      20:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      24:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      28:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      2c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      30:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      34:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__vector_13>
      38:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      3c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      40:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_16>
      44:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      48:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      4c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      50:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      54:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      58:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      5c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      60:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
      64:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	bc 5f       	subi	r27, 0xFC	; 252
      6a:	9c 60       	ori	r25, 0x0C	; 12
      6c:	a4 61       	ori	r26, 0x14	; 20
      6e:	84 62       	ori	r24, 0x24	; 36
      70:	b6 63       	ori	r27, 0x36	; 54
      72:	96 64       	ori	r25, 0x46	; 70
      74:	b0 65       	ori	r27, 0x50	; 80
      76:	9f 66       	ori	r25, 0x6F	; 111
      78:	b5 67       	ori	r27, 0x75	; 117
      7a:	ff ff       	.word	0xffff	; ????

0000007c <ssd1306oled_font>:
	...
      84:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
      94:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
      a4:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
      b4:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
      c4:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
      d4:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
      e4:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
      f4:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
     104:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     114:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     124:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     134:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     144:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     154:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     164:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     174:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     184:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     194:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     1a4:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     1b4:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     1c4:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     1d4:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     1e4:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
     1f4:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
     204:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     214:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     224:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     234:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     244:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     254:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     264:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     274:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     284:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     294:	a0 a0 a0 7c 00 44 64 54 4c 44 00 00 08 77 41 00     ...|.DdTLD...wA.
     2a4:	00 00 00 63 00 00 00 00 41 77 08 00 00 08 04 08     ...c....Aw......
     2b4:	08 04 00 3a 40 40 20 7a 00 3d 40 40 40 3d 00 21     ...:@@ z.=@@@=.!
     2c4:	54 54 54 79 00 7d 12 11 12 7d 00 39 44 44 44 39     TTTy.}...}.9DDD9
     2d4:	00 3d 42 42 42 3d 00 02 05 02 00 00 00 7e 01 49     .=BBB=.......~.I
     2e4:	55 73 00 7c 10 10 08 1c                             Us.|....

000002ec <init_sequence>:
     2ec:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 1f a4 d3     . .....@.?......
     2fc:	00 d5 f0 d9 22 da 02 db 20 8d 14 00                 ...."... ...

00000308 <__ctors_end>:
     308:	11 24       	eor	r1, r1
     30a:	1f be       	out	0x3f, r1	; 63
     30c:	cf ef       	ldi	r28, 0xFF	; 255
     30e:	d8 e0       	ldi	r29, 0x08	; 8
     310:	de bf       	out	0x3e, r29	; 62
     312:	cd bf       	out	0x3d, r28	; 61

00000314 <__do_copy_data>:
     314:	13 e0       	ldi	r17, 0x03	; 3
     316:	a0 e0       	ldi	r26, 0x00	; 0
     318:	b1 e0       	ldi	r27, 0x01	; 1
     31a:	e6 e7       	ldi	r30, 0x76	; 118
     31c:	f4 e1       	ldi	r31, 0x14	; 20
     31e:	02 c0       	rjmp	.+4      	; 0x324 <__do_copy_data+0x10>
     320:	05 90       	lpm	r0, Z+
     322:	0d 92       	st	X+, r0
     324:	ac 35       	cpi	r26, 0x5C	; 92
     326:	b1 07       	cpc	r27, r17
     328:	d9 f7       	brne	.-10     	; 0x320 <__do_copy_data+0xc>

0000032a <__do_clear_bss>:
     32a:	23 e0       	ldi	r18, 0x03	; 3
     32c:	ac e5       	ldi	r26, 0x5C	; 92
     32e:	b3 e0       	ldi	r27, 0x03	; 3
     330:	01 c0       	rjmp	.+2      	; 0x334 <.do_clear_bss_start>

00000332 <.do_clear_bss_loop>:
     332:	1d 92       	st	X+, r1

00000334 <.do_clear_bss_start>:
     334:	a9 36       	cpi	r26, 0x69	; 105
     336:	b2 07       	cpc	r27, r18
     338:	e1 f7       	brne	.-8      	; 0x332 <.do_clear_bss_loop>
     33a:	0e 94 99 06 	call	0xd32	; 0xd32 <main>
     33e:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <_exit>

00000342 <__bad_interrupt>:
     342:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000346 <i2c_init>:
            break;
        case 64:
            TWSR = 0x3;
            break;
        default:
            TWSR = 0x00;
     346:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
            break;
    }
    TWBR = (uint8_t)SET_TWBR;
     34a:	88 e4       	ldi	r24, 0x48	; 72
     34c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    // enable
    TWCR = (1 << TWEN);
     350:	84 e0       	ldi	r24, 0x04	; 4
     352:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     356:	08 95       	ret

00000358 <i2c_start>:
 
 Return Value: none
 **********************************************/
void i2c_start(uint8_t i2c_addr){
    // i2c start
    TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
     358:	94 ea       	ldi	r25, 0xA4	; 164
     35a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	uint16_t timeout = F_CPU/F_I2C*2.0;
     35e:	20 e4       	ldi	r18, 0x40	; 64
     360:	31 e0       	ldi	r19, 0x01	; 1
    while((TWCR & (1 << TWINT)) == 0 &&
     362:	09 c0       	rjmp	.+18     	; 0x376 <i2c_start+0x1e>
		timeout !=0){
		timeout--;
     364:	21 50       	subi	r18, 0x01	; 1
     366:	31 09       	sbc	r19, r1
		if(timeout == 0){
     368:	31 f4       	brne	.+12     	; 0x376 <i2c_start+0x1e>
			I2C_ErrorCode |= (1 << I2C_START);
     36a:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <I2C_ErrorCode>
     36e:	81 60       	ori	r24, 0x01	; 1
     370:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <I2C_ErrorCode>
			return;
     374:	08 95       	ret
 **********************************************/
void i2c_start(uint8_t i2c_addr){
    // i2c start
    TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
	uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
     376:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     37a:	99 23       	and	r25, r25
     37c:	1c f0       	brlt	.+6      	; 0x384 <i2c_start+0x2c>
     37e:	21 15       	cp	r18, r1
     380:	31 05       	cpc	r19, r1
     382:	81 f7       	brne	.-32     	; 0x364 <i2c_start+0xc>
			I2C_ErrorCode |= (1 << I2C_START);
			return;
		}
	};
    // send adress
    TWDR = i2c_addr;
     384:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWINT)|( 1 << TWEN);
     388:	84 e8       	ldi	r24, 0x84	; 132
     38a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    timeout = F_CPU/F_I2C*2.0;
     38e:	80 e4       	ldi	r24, 0x40	; 64
     390:	91 e0       	ldi	r25, 0x01	; 1
    while((TWCR & (1 << TWINT)) == 0 &&
     392:	08 c0       	rjmp	.+16     	; 0x3a4 <i2c_start+0x4c>
		  timeout !=0){
		timeout--;
     394:	01 97       	sbiw	r24, 0x01	; 1
		if(timeout == 0){
     396:	31 f4       	brne	.+12     	; 0x3a4 <i2c_start+0x4c>
			I2C_ErrorCode |= (1 << I2C_SENDADRESS);
     398:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <I2C_ErrorCode>
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <I2C_ErrorCode>
			return;
     3a2:	08 95       	ret
	};
    // send adress
    TWDR = i2c_addr;
    TWCR = (1 << TWINT)|( 1 << TWEN);
    timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
     3a4:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3a8:	22 23       	and	r18, r18
     3aa:	14 f0       	brlt	.+4      	; 0x3b0 <i2c_start+0x58>
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	91 f7       	brne	.-28     	; 0x394 <i2c_start+0x3c>
     3b0:	08 95       	ret

000003b2 <i2c_stop>:
 
 Return Value: none
 **********************************************/
void i2c_stop(void){
    // i2c stop
    TWCR = (1 << TWINT)|(1 << TWSTO)|(1 << TWEN);
     3b2:	84 e9       	ldi	r24, 0x94	; 148
     3b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3b8:	08 95       	ret

000003ba <i2c_byte>:
 - uint8_t byte: Byte to send to reciever
 
 Return Value: none
 **********************************************/
void i2c_byte(uint8_t byte){
    TWDR = byte;
     3ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWINT)|( 1 << TWEN);
     3be:	84 e8       	ldi	r24, 0x84	; 132
     3c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    uint16_t timeout = F_CPU/F_I2C*2.0;
     3c4:	80 e4       	ldi	r24, 0x40	; 64
     3c6:	91 e0       	ldi	r25, 0x01	; 1
    while((TWCR & (1 << TWINT)) == 0 &&
     3c8:	08 c0       	rjmp	.+16     	; 0x3da <i2c_byte+0x20>
		  timeout !=0){
		timeout--;
     3ca:	01 97       	sbiw	r24, 0x01	; 1
		if(timeout == 0){
     3cc:	31 f4       	brne	.+12     	; 0x3da <i2c_byte+0x20>
			I2C_ErrorCode |= (1 << I2C_BYTE);
     3ce:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <I2C_ErrorCode>
     3d2:	84 60       	ori	r24, 0x04	; 4
     3d4:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <I2C_ErrorCode>
			return;
     3d8:	08 95       	ret
 **********************************************/
void i2c_byte(uint8_t byte){
    TWDR = byte;
    TWCR = (1 << TWINT)|( 1 << TWEN);
    uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
     3da:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3de:	22 23       	and	r18, r18
     3e0:	14 f0       	brlt	.+4      	; 0x3e6 <i2c_byte+0x2c>
     3e2:	00 97       	sbiw	r24, 0x00	; 0
     3e4:	91 f7       	brne	.-28     	; 0x3ca <i2c_byte+0x10>
     3e6:	08 95       	ret

000003e8 <lcd_command>:
            break;
    }
    
}
void lcd_charMode(uint8_t mode){
    charMode = mode;
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	8c 01       	movw	r16, r24
     3f2:	d6 2f       	mov	r29, r22
     3f4:	88 e7       	ldi	r24, 0x78	; 120
     3f6:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_start>
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <i2c_byte>
     400:	c0 e0       	ldi	r28, 0x00	; 0
     402:	07 c0       	rjmp	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     404:	f8 01       	movw	r30, r16
     406:	ec 0f       	add	r30, r28
     408:	f1 1d       	adc	r31, r1
     40a:	80 81       	ld	r24, Z
     40c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <i2c_byte>
     410:	cf 5f       	subi	r28, 0xFF	; 255
     412:	cd 17       	cp	r28, r29
     414:	b8 f3       	brcs	.-18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     416:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <i2c_stop>
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	08 95       	ret

00000424 <lcd_data>:
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	7c 01       	movw	r14, r24
     432:	8b 01       	movw	r16, r22
     434:	88 e7       	ldi	r24, 0x78	; 120
     436:	0e 94 ac 01 	call	0x358	; 0x358 <i2c_start>
     43a:	80 e4       	ldi	r24, 0x40	; 64
     43c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <i2c_byte>
     440:	c0 e0       	ldi	r28, 0x00	; 0
     442:	d0 e0       	ldi	r29, 0x00	; 0
     444:	07 c0       	rjmp	.+14     	; 0x454 <lcd_data+0x30>
     446:	f7 01       	movw	r30, r14
     448:	ec 0f       	add	r30, r28
     44a:	fd 1f       	adc	r31, r29
     44c:	80 81       	ld	r24, Z
     44e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <i2c_byte>
     452:	21 96       	adiw	r28, 0x01	; 1
     454:	c0 17       	cp	r28, r16
     456:	d1 07       	cpc	r29, r17
     458:	b0 f3       	brcs	.-20     	; 0x446 <lcd_data+0x22>
     45a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <i2c_stop>
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	08 95       	ret

0000046c <lcd_goto_xpix_y>:
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	00 d0       	rcall	.+0      	; 0x472 <lcd_goto_xpix_y+0x6>
     472:	00 d0       	rcall	.+0      	; 0x474 <lcd_goto_xpix_y+0x8>
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	81 38       	cpi	r24, 0x81	; 129
     47a:	90 f4       	brcc	.+36     	; 0x4a0 <lcd_goto_xpix_y+0x34>
     47c:	64 30       	cpi	r22, 0x04	; 4
     47e:	80 f4       	brcc	.+32     	; 0x4a0 <lcd_goto_xpix_y+0x34>
     480:	ec e5       	ldi	r30, 0x5C	; 92
     482:	f3 e0       	ldi	r31, 0x03	; 3
     484:	80 83       	st	Z, r24
     486:	61 83       	std	Z+1, r22	; 0x01
     488:	60 55       	subi	r22, 0x50	; 80
     48a:	69 83       	std	Y+1, r22	; 0x01
     48c:	91 e2       	ldi	r25, 0x21	; 33
     48e:	9a 83       	std	Y+2, r25	; 0x02
     490:	8b 83       	std	Y+3, r24	; 0x03
     492:	8f e7       	ldi	r24, 0x7F	; 127
     494:	8c 83       	std	Y+4, r24	; 0x04
     496:	64 e0       	ldi	r22, 0x04	; 4
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_command>
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <lcd_gotoxy>:
     4ae:	98 2f       	mov	r25, r24
     4b0:	99 0f       	add	r25, r25
     4b2:	98 0f       	add	r25, r24
     4b4:	89 2f       	mov	r24, r25
     4b6:	88 0f       	add	r24, r24
     4b8:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_goto_xpix_y>
     4bc:	08 95       	ret

000004be <lcd_home>:
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
     4c6:	08 95       	ret

000004c8 <lcd_clrscr>:
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	c0 58       	subi	r28, 0x80	; 128
     4d4:	d1 09       	sbc	r29, r1
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	fe 01       	movw	r30, r28
     4e2:	31 96       	adiw	r30, 0x01	; 1
     4e4:	80 e8       	ldi	r24, 0x80	; 128
     4e6:	df 01       	movw	r26, r30
     4e8:	1d 92       	st	X+, r1
     4ea:	8a 95       	dec	r24
     4ec:	e9 f7       	brne	.-6      	; 0x4e8 <lcd_clrscr+0x20>
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	0b c0       	rjmp	.+22     	; 0x508 <lcd_clrscr+0x40>
     4f2:	61 2f       	mov	r22, r17
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
     4fa:	60 e8       	ldi	r22, 0x80	; 128
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	0e 94 12 02 	call	0x424	; 0x424 <lcd_data>
     506:	1f 5f       	subi	r17, 0xFF	; 255
     508:	14 30       	cpi	r17, 0x04	; 4
     50a:	98 f3       	brcs	.-26     	; 0x4f2 <lcd_clrscr+0x2a>
     50c:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_home>
     510:	c0 58       	subi	r28, 0x80	; 128
     512:	df 4f       	sbci	r29, 0xFF	; 255
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	08 95       	ret

00000526 <lcd_init>:
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	6c 97       	sbiw	r28, 0x1c	; 28
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	18 2f       	mov	r17, r24
     53e:	0e 94 a3 01 	call	0x346	; 0x346 <i2c_init>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	0e c0       	rjmp	.+28     	; 0x562 <lcd_init+0x3c>
     546:	82 2f       	mov	r24, r18
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	e4 51       	subi	r30, 0x14	; 20
     54e:	fd 4f       	sbci	r31, 0xFD	; 253
     550:	e4 91       	lpm	r30, Z
     552:	a1 e0       	ldi	r26, 0x01	; 1
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	ac 0f       	add	r26, r28
     558:	bd 1f       	adc	r27, r29
     55a:	a8 0f       	add	r26, r24
     55c:	b9 1f       	adc	r27, r25
     55e:	ec 93       	st	X, r30
     560:	2f 5f       	subi	r18, 0xFF	; 255
     562:	2b 31       	cpi	r18, 0x1B	; 27
     564:	80 f3       	brcs	.-32     	; 0x546 <lcd_init+0x20>
     566:	1c 8f       	std	Y+28, r17	; 0x1c
     568:	6c e1       	ldi	r22, 0x1C	; 28
     56a:	ce 01       	movw	r24, r28
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_command>
     572:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_clrscr>
     576:	6c 96       	adiw	r28, 0x1c	; 28
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	08 95       	ret

0000058a <lcd_putc>:
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	6c 97       	sbiw	r28, 0x1c	; 28
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	89 30       	cpi	r24, 0x09	; 9
     5ac:	01 f1       	breq	.+64     	; 0x5ee <lcd_putc+0x64>
     5ae:	18 f4       	brcc	.+6      	; 0x5b6 <lcd_putc+0x2c>
     5b0:	88 30       	cpi	r24, 0x08	; 8
     5b2:	39 f0       	breq	.+14     	; 0x5c2 <lcd_putc+0x38>
     5b4:	52 c0       	rjmp	.+164    	; 0x65a <lcd_putc+0xd0>
     5b6:	8a 30       	cpi	r24, 0x0A	; 10
     5b8:	e9 f1       	breq	.+122    	; 0x634 <lcd_putc+0xaa>
     5ba:	8d 30       	cpi	r24, 0x0D	; 13
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <lcd_putc+0x36>
     5be:	47 c0       	rjmp	.+142    	; 0x64e <lcd_putc+0xc4>
     5c0:	4c c0       	rjmp	.+152    	; 0x65a <lcd_putc+0xd0>
     5c2:	0c e5       	ldi	r16, 0x5C	; 92
     5c4:	13 e0       	ldi	r17, 0x03	; 3
     5c6:	f8 01       	movw	r30, r16
     5c8:	80 81       	ld	r24, Z
     5ca:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5ce:	61 81       	ldd	r22, Z+1	; 0x01
     5d0:	89 1b       	sub	r24, r25
     5d2:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
     5d6:	80 e2       	ldi	r24, 0x20	; 32
     5d8:	0e 94 c5 02 	call	0x58a	; 0x58a <lcd_putc>
     5dc:	f8 01       	movw	r30, r16
     5de:	80 81       	ld	r24, Z
     5e0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5e4:	61 81       	ldd	r22, Z+1	; 0x01
     5e6:	89 1b       	sub	r24, r25
     5e8:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
     5ec:	59 c1       	rjmp	.+690    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     5ee:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <__data_end>
     5f2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5f6:	29 2f       	mov	r18, r25
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	22 0f       	add	r18, r18
     5fc:	33 1f       	adc	r19, r19
     5fe:	22 0f       	add	r18, r18
     600:	33 1f       	adc	r19, r19
     602:	b9 01       	movw	r22, r18
     604:	68 0f       	add	r22, r24
     606:	71 1d       	adc	r23, r1
     608:	45 e1       	ldi	r20, 0x15	; 21
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	fa 01       	movw	r30, r20
     60e:	e2 1b       	sub	r30, r18
     610:	f3 0b       	sbc	r31, r19
     612:	6e 17       	cp	r22, r30
     614:	7f 07       	cpc	r23, r31
     616:	40 f4       	brcc	.+16     	; 0x628 <lcd_putc+0x9e>
     618:	99 0f       	add	r25, r25
     61a:	99 0f       	add	r25, r25
     61c:	60 91 5d 03 	lds	r22, 0x035D	; 0x80035d <__data_end+0x1>
     620:	89 0f       	add	r24, r25
     622:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
     626:	3c c1       	rjmp	.+632    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     628:	60 91 5d 03 	lds	r22, 0x035D	; 0x80035d <__data_end+0x1>
     62c:	85 e1       	ldi	r24, 0x15	; 21
     62e:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
     632:	36 c1       	rjmp	.+620    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     634:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <__data_end+0x1>
     638:	83 30       	cpi	r24, 0x03	; 3
     63a:	08 f0       	brcs	.+2      	; 0x63e <lcd_putc+0xb4>
     63c:	31 c1       	rjmp	.+610    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     63e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     642:	68 0f       	add	r22, r24
     644:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <__data_end>
     648:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
     64c:	29 c1       	rjmp	.+594    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     64e:	60 91 5d 03 	lds	r22, 0x035D	; 0x80035d <__data_end+0x1>
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
     658:	23 c1       	rjmp	.+582    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     65a:	50 91 5c 03 	lds	r21, 0x035C	; 0x80035c <__data_end>
     65e:	5a 37       	cpi	r21, 0x7A	; 122
     660:	08 f0       	brcs	.+2      	; 0x664 <lcd_putc+0xda>
     662:	1e c1       	rjmp	.+572    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     664:	80 32       	cpi	r24, 0x20	; 32
     666:	08 f4       	brcc	.+2      	; 0x66a <lcd_putc+0xe0>
     668:	1b c1       	rjmp	.+566    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     66a:	80 52       	subi	r24, 0x20	; 32
     66c:	e9 e6       	ldi	r30, 0x69	; 105
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	e4 91       	lpm	r30, Z
     672:	8e 17       	cp	r24, r30
     674:	98 f4       	brcc	.+38     	; 0x69c <lcd_putc+0x112>
     676:	23 c0       	rjmp	.+70     	; 0x6be <lcd_putc+0x134>
     678:	f9 01       	movw	r30, r18
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	e8 59       	subi	r30, 0x98	; 152
     680:	ff 4f       	sbci	r31, 0xFF	; 255
     682:	e4 91       	lpm	r30, Z
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	b0 97       	sbiw	r30, 0x20	; 32
     688:	28 2f       	mov	r18, r24
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	e2 17       	cp	r30, r18
     68e:	f3 07       	cpc	r31, r19
     690:	19 f4       	brne	.+6      	; 0x698 <lcd_putc+0x10e>
     692:	fb 01       	movw	r30, r22
     694:	84 91       	lpm	r24, Z
     696:	10 c0       	rjmp	.+32     	; 0x6b8 <lcd_putc+0x12e>
     698:	9f 5f       	subi	r25, 0xFF	; 255
     69a:	01 c0       	rjmp	.+2      	; 0x69e <lcd_putc+0x114>
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	29 2f       	mov	r18, r25
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	f9 01       	movw	r30, r18
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	bf 01       	movw	r22, r30
     6aa:	67 59       	subi	r22, 0x97	; 151
     6ac:	7f 4f       	sbci	r23, 0xFF	; 255
     6ae:	fb 01       	movw	r30, r22
     6b0:	44 91       	lpm	r20, Z
     6b2:	4f 3f       	cpi	r20, 0xFF	; 255
     6b4:	09 f7       	brne	.-62     	; 0x678 <lcd_putc+0xee>
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	8f 3f       	cpi	r24, 0xFF	; 255
     6ba:	09 f4       	brne	.+2      	; 0x6be <lcd_putc+0x134>
     6bc:	f1 c0       	rjmp	.+482    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     6be:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6c2:	92 30       	cpi	r25, 0x02	; 2
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <lcd_putc+0x13e>
     6c6:	be c0       	rjmp	.+380    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     6c8:	25 2f       	mov	r18, r21
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	24 5f       	subi	r18, 0xF4	; 244
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	21 38       	cpi	r18, 0x81	; 129
     6d2:	31 05       	cpc	r19, r1
     6d4:	08 f0       	brcs	.+2      	; 0x6d8 <lcd_putc+0x14e>
     6d6:	e4 c0       	rjmp	.+456    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     6d8:	f1 2c       	mov	r15, r1
     6da:	4f c0       	rjmp	.+158    	; 0x77a <lcd_putc+0x1f0>
     6dc:	6f 2d       	mov	r22, r15
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	fb 01       	movw	r30, r22
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	21 e0       	ldi	r18, 0x01	; 1
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	2c 0f       	add	r18, r28
     6ec:	3d 1f       	adc	r19, r29
     6ee:	e2 0f       	add	r30, r18
     6f0:	f3 1f       	adc	r31, r19
     6f2:	15 86       	std	Z+13, r1	; 0x0d
     6f4:	14 86       	std	Z+12, r1	; 0x0c
     6f6:	28 2f       	mov	r18, r24
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	f9 01       	movw	r30, r18
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	e2 0f       	add	r30, r18
     702:	f3 1f       	adc	r31, r19
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	e6 0f       	add	r30, r22
     70a:	f7 1f       	adc	r31, r23
     70c:	e4 58       	subi	r30, 0x84	; 132
     70e:	ff 4f       	sbci	r31, 0xFF	; 255
     710:	e4 90       	lpm	r14, Z
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	2f c0       	rjmp	.+94     	; 0x774 <lcd_putc+0x1ea>
     716:	a9 2f       	mov	r26, r25
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	2e 2d       	mov	r18, r14
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	09 2e       	mov	r0, r25
     720:	02 c0       	rjmp	.+4      	; 0x726 <lcd_putc+0x19c>
     722:	35 95       	asr	r19
     724:	27 95       	ror	r18
     726:	0a 94       	dec	r0
     728:	e2 f7       	brpl	.-8      	; 0x722 <lcd_putc+0x198>
     72a:	20 ff       	sbrs	r18, 0
     72c:	22 c0       	rjmp	.+68     	; 0x772 <lcd_putc+0x1e8>
     72e:	aa 0f       	add	r26, r26
     730:	bb 1f       	adc	r27, r27
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	69 01       	movw	r12, r18
     738:	0a 2e       	mov	r0, r26
     73a:	02 c0       	rjmp	.+4      	; 0x740 <lcd_putc+0x1b6>
     73c:	cc 0c       	add	r12, r12
     73e:	dd 1c       	adc	r13, r13
     740:	0a 94       	dec	r0
     742:	e2 f7       	brpl	.-8      	; 0x73c <lcd_putc+0x1b2>
     744:	8b 01       	movw	r16, r22
     746:	00 0f       	add	r16, r16
     748:	11 1f       	adc	r17, r17
     74a:	e1 e0       	ldi	r30, 0x01	; 1
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	ec 0f       	add	r30, r28
     750:	fd 1f       	adc	r31, r29
     752:	e0 0f       	add	r30, r16
     754:	f1 1f       	adc	r31, r17
     756:	44 85       	ldd	r20, Z+12	; 0x0c
     758:	55 85       	ldd	r21, Z+13	; 0x0d
     75a:	4c 29       	or	r20, r12
     75c:	5d 29       	or	r21, r13
     75e:	11 96       	adiw	r26, 0x01	; 1
     760:	02 c0       	rjmp	.+4      	; 0x766 <lcd_putc+0x1dc>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	aa 95       	dec	r26
     768:	e2 f7       	brpl	.-8      	; 0x762 <lcd_putc+0x1d8>
     76a:	24 2b       	or	r18, r20
     76c:	35 2b       	or	r19, r21
     76e:	35 87       	std	Z+13, r19	; 0x0d
     770:	24 87       	std	Z+12, r18	; 0x0c
     772:	9f 5f       	subi	r25, 0xFF	; 255
     774:	98 30       	cpi	r25, 0x08	; 8
     776:	78 f2       	brcs	.-98     	; 0x716 <lcd_putc+0x18c>
     778:	f3 94       	inc	r15
     77a:	35 e0       	ldi	r19, 0x05	; 5
     77c:	3f 15       	cp	r19, r15
     77e:	08 f0       	brcs	.+2      	; 0x782 <lcd_putc+0x1f8>
     780:	ad cf       	rjmp	.-166    	; 0x6dc <lcd_putc+0x152>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	15 c0       	rjmp	.+42     	; 0x7b0 <lcd_putc+0x226>
     786:	82 2f       	mov	r24, r18
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	e1 e0       	ldi	r30, 0x01	; 1
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	ec 0f       	add	r30, r28
     794:	fd 1f       	adc	r31, r29
     796:	e8 0f       	add	r30, r24
     798:	f9 1f       	adc	r31, r25
     79a:	34 85       	ldd	r19, Z+12	; 0x0c
     79c:	30 83       	st	Z, r19
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	e1 e0       	ldi	r30, 0x01	; 1
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	ec 0f       	add	r30, r28
     7a6:	fd 1f       	adc	r31, r29
     7a8:	e8 0f       	add	r30, r24
     7aa:	f9 1f       	adc	r31, r25
     7ac:	30 83       	st	Z, r19
     7ae:	2f 5f       	subi	r18, 0xFF	; 255
     7b0:	26 30       	cpi	r18, 0x06	; 6
     7b2:	48 f3       	brcs	.-46     	; 0x786 <lcd_putc+0x1fc>
     7b4:	6c e0       	ldi	r22, 0x0C	; 12
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	0e 94 12 02 	call	0x424	; 0x424 <lcd_data>
     7c0:	ec e5       	ldi	r30, 0x5C	; 92
     7c2:	f3 e0       	ldi	r31, 0x03	; 3
     7c4:	81 81       	ldd	r24, Z+1	; 0x01
     7c6:	8f 54       	subi	r24, 0x4F	; 79
     7c8:	89 8f       	std	Y+25, r24	; 0x19
     7ca:	81 e2       	ldi	r24, 0x21	; 33
     7cc:	8a 8f       	std	Y+26, r24	; 0x1a
     7ce:	80 81       	ld	r24, Z
     7d0:	8b 8f       	std	Y+27, r24	; 0x1b
     7d2:	8f e7       	ldi	r24, 0x7F	; 127
     7d4:	8c 8f       	std	Y+28, r24	; 0x1c
     7d6:	64 e0       	ldi	r22, 0x04	; 4
     7d8:	ce 01       	movw	r24, r28
     7da:	49 96       	adiw	r24, 0x19	; 25
     7dc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_command>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	15 c0       	rjmp	.+42     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7e4:	82 2f       	mov	r24, r18
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	e1 e0       	ldi	r30, 0x01	; 1
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	ec 0f       	add	r30, r28
     7f2:	fd 1f       	adc	r31, r29
     7f4:	e8 0f       	add	r30, r24
     7f6:	f9 1f       	adc	r31, r25
     7f8:	35 85       	ldd	r19, Z+13	; 0x0d
     7fa:	30 83       	st	Z, r19
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	e1 e0       	ldi	r30, 0x01	; 1
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	ec 0f       	add	r30, r28
     804:	fd 1f       	adc	r31, r29
     806:	e8 0f       	add	r30, r24
     808:	f9 1f       	adc	r31, r25
     80a:	30 83       	st	Z, r19
     80c:	2f 5f       	subi	r18, 0xFF	; 255
     80e:	26 30       	cpi	r18, 0x06	; 6
     810:	48 f3       	brcs	.-46     	; 0x7e4 <lcd_putc+0x25a>
     812:	6c e0       	ldi	r22, 0x0C	; 12
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	ce 01       	movw	r24, r28
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	0e 94 12 02 	call	0x424	; 0x424 <lcd_data>
     81e:	0c e5       	ldi	r16, 0x5C	; 92
     820:	13 e0       	ldi	r17, 0x03	; 3
     822:	f8 01       	movw	r30, r16
     824:	81 81       	ldd	r24, Z+1	; 0x01
     826:	80 55       	subi	r24, 0x50	; 80
     828:	89 8f       	std	Y+25, r24	; 0x19
     82a:	80 81       	ld	r24, Z
     82c:	84 5f       	subi	r24, 0xF4	; 244
     82e:	8b 8f       	std	Y+27, r24	; 0x1b
     830:	64 e0       	ldi	r22, 0x04	; 4
     832:	ce 01       	movw	r24, r28
     834:	49 96       	adiw	r24, 0x19	; 25
     836:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_command>
     83a:	f8 01       	movw	r30, r16
     83c:	80 81       	ld	r24, Z
     83e:	84 5f       	subi	r24, 0xF4	; 244
     840:	80 83       	st	Z, r24
     842:	2e c0       	rjmp	.+92     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     844:	25 2f       	mov	r18, r21
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	2a 5f       	subi	r18, 0xFA	; 250
     84a:	3f 4f       	sbci	r19, 0xFF	; 255
     84c:	21 38       	cpi	r18, 0x81	; 129
     84e:	31 05       	cpc	r19, r1
     850:	38 f5       	brcc	.+78     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	18 c0       	rjmp	.+48     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     856:	28 2f       	mov	r18, r24
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	49 2f       	mov	r20, r25
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	f9 01       	movw	r30, r18
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	e2 0f       	add	r30, r18
     866:	f3 1f       	adc	r31, r19
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	e4 0f       	add	r30, r20
     86e:	f5 1f       	adc	r31, r21
     870:	e4 58       	subi	r30, 0x84	; 132
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	e4 91       	lpm	r30, Z
     876:	a1 e0       	ldi	r26, 0x01	; 1
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	ac 0f       	add	r26, r28
     87c:	bd 1f       	adc	r27, r29
     87e:	a4 0f       	add	r26, r20
     880:	b5 1f       	adc	r27, r21
     882:	ec 93       	st	X, r30
     884:	9f 5f       	subi	r25, 0xFF	; 255
     886:	96 30       	cpi	r25, 0x06	; 6
     888:	30 f3       	brcs	.-52     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     88a:	66 e0       	ldi	r22, 0x06	; 6
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	0e 94 12 02 	call	0x424	; 0x424 <lcd_data>
     896:	ec e5       	ldi	r30, 0x5C	; 92
     898:	f3 e0       	ldi	r31, 0x03	; 3
     89a:	80 81       	ld	r24, Z
     89c:	8a 5f       	subi	r24, 0xFA	; 250
     89e:	80 83       	st	Z, r24
     8a0:	6c 96       	adiw	r28, 0x1c	; 28
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	cf 90       	pop	r12
     8bc:	08 95       	ret

000008be <lcd_puts>:
}
void lcd_puts(const char* s){
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
    while (*s) {
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <lcd_puts+0xe>
        lcd_putc(*s++);
     8c6:	21 96       	adiw	r28, 0x01	; 1
     8c8:	0e 94 c5 02 	call	0x58a	; 0x58a <lcd_putc>
}
void lcd_charMode(uint8_t mode){
    charMode = mode;
}
void lcd_puts(const char* s){
    while (*s) {
     8cc:	88 81       	ld	r24, Y
     8ce:	81 11       	cpse	r24, r1
     8d0:	fa cf       	rjmp	.-12     	; 0x8c6 <lcd_puts+0x8>
        lcd_putc(*s++);
    }
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <led_reset>:
	TIMSK1 = (0 <<TOIE1);//disable timer 1 interrupt
	return 0;
}

void led_reset(void){
	lcd_clrscr(); //clear OLED screen
     8d8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_clrscr>
	lcd_gotoxy(0,0); //set text at 0,0
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
     8e4:	08 95       	ret

000008e6 <blinkGreen>:
}

void blinkGreen(void){
	for(int i = 0; i<7;i++){
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	1a c0       	rjmp	.+52     	; 0x920 <__stack+0x21>
		PORTD |= (1<<greenCheck);//green led on
     8ec:	8b b1       	in	r24, 0x0b	; 11
     8ee:	80 64       	ori	r24, 0x40	; 64
     8f0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f2:	4f ef       	ldi	r20, 0xFF	; 255
     8f4:	81 ee       	ldi	r24, 0xE1	; 225
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	41 50       	subi	r20, 0x01	; 1
     8fa:	80 40       	sbci	r24, 0x00	; 0
     8fc:	90 40       	sbci	r25, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <blinkGreen+0x12>
     900:	00 c0       	rjmp	.+0      	; 0x902 <__stack+0x3>
     902:	00 00       	nop
		_delay_ms(100);//wait
		PORTD &= ~(1<<greenCheck);//green led off
     904:	8b b1       	in	r24, 0x0b	; 11
     906:	8f 7b       	andi	r24, 0xBF	; 191
     908:	8b b9       	out	0x0b, r24	; 11
     90a:	4f ef       	ldi	r20, 0xFF	; 255
     90c:	81 ee       	ldi	r24, 0xE1	; 225
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	41 50       	subi	r20, 0x01	; 1
     912:	80 40       	sbci	r24, 0x00	; 0
     914:	90 40       	sbci	r25, 0x00	; 0
     916:	e1 f7       	brne	.-8      	; 0x910 <__stack+0x11>
     918:	00 c0       	rjmp	.+0      	; 0x91a <__stack+0x1b>
     91a:	00 00       	nop
	lcd_clrscr(); //clear OLED screen
	lcd_gotoxy(0,0); //set text at 0,0
}

void blinkGreen(void){
	for(int i = 0; i<7;i++){
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	27 30       	cpi	r18, 0x07	; 7
     922:	31 05       	cpc	r19, r1
     924:	1c f3       	brlt	.-58     	; 0x8ec <blinkGreen+0x6>
		PORTD |= (1<<greenCheck);//green led on
		_delay_ms(100);//wait
		PORTD &= ~(1<<greenCheck);//green led off
		_delay_ms(100);//delay
	}
}
     926:	08 95       	ret

00000928 <blinkRed>:

void blinkRed(void){
	for(int i = 0; i<7;i++){
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	1a c0       	rjmp	.+52     	; 0x962 <blinkRed+0x3a>
		PORTD |= (1<<redCheck);//green led on
     92e:	8b b1       	in	r24, 0x0b	; 11
     930:	80 68       	ori	r24, 0x80	; 128
     932:	8b b9       	out	0x0b, r24	; 11
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	81 ee       	ldi	r24, 0xE1	; 225
     938:	94 e0       	ldi	r25, 0x04	; 4
     93a:	41 50       	subi	r20, 0x01	; 1
     93c:	80 40       	sbci	r24, 0x00	; 0
     93e:	90 40       	sbci	r25, 0x00	; 0
     940:	e1 f7       	brne	.-8      	; 0x93a <blinkRed+0x12>
     942:	00 c0       	rjmp	.+0      	; 0x944 <blinkRed+0x1c>
     944:	00 00       	nop
		_delay_ms(100);//wait
		PORTD &= ~(1<<redCheck);//green led off
     946:	8b b1       	in	r24, 0x0b	; 11
     948:	8f 77       	andi	r24, 0x7F	; 127
     94a:	8b b9       	out	0x0b, r24	; 11
     94c:	4f ef       	ldi	r20, 0xFF	; 255
     94e:	81 ee       	ldi	r24, 0xE1	; 225
     950:	94 e0       	ldi	r25, 0x04	; 4
     952:	41 50       	subi	r20, 0x01	; 1
     954:	80 40       	sbci	r24, 0x00	; 0
     956:	90 40       	sbci	r25, 0x00	; 0
     958:	e1 f7       	brne	.-8      	; 0x952 <blinkRed+0x2a>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <blinkRed+0x34>
     95c:	00 00       	nop
		_delay_ms(100);//delay
	}
}

void blinkRed(void){
	for(int i = 0; i<7;i++){
     95e:	2f 5f       	subi	r18, 0xFF	; 255
     960:	3f 4f       	sbci	r19, 0xFF	; 255
     962:	27 30       	cpi	r18, 0x07	; 7
     964:	31 05       	cpc	r19, r1
     966:	1c f3       	brlt	.-58     	; 0x92e <blinkRed+0x6>
		PORTD |= (1<<redCheck);//green led on
		_delay_ms(100);//wait
		PORTD &= ~(1<<redCheck);//green led off
		_delay_ms(100);//delay
	}	
}
     968:	08 95       	ret

0000096a <getDistance>:

void getDistance(void){
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
	unsigned int timeToRisingEdge, timeToFallingEdge, pulseWidth;//variables for the duration of sound wave travel
	int distance; //variable for the distance measurement
	DDRB |= (1<<TRIGGER);//set TRIGGER (PB1) to output
     972:	84 b1       	in	r24, 0x04	; 4
     974:	82 60       	ori	r24, 0x02	; 2
     976:	84 b9       	out	0x04, r24	; 4
	TCCR1A = 0;//timer 1 on normal
     978:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	
	PORTB |= (1<<TRIGGER);//provide 10.0 us pulse to trigger pin
     97c:	85 b1       	in	r24, 0x05	; 5
     97e:	82 60       	ori	r24, 0x02	; 2
     980:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     982:	25 e3       	ldi	r18, 0x35	; 53
     984:	2a 95       	dec	r18
     986:	f1 f7       	brne	.-4      	; 0x984 <getDistance+0x1a>
     988:	00 00       	nop
	_delay_us(10.);
	PORTB &= ~(1<<TRIGGER);
     98a:	85 b1       	in	r24, 0x05	; 5
     98c:	8d 7f       	andi	r24, 0xFD	; 253
     98e:	85 b9       	out	0x05, r24	; 5
	TCNT1 = 0x00;
     990:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     994:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	TCCR1B = 0x45; //start counting till rising edge with prescaler 1024
     998:	85 e4       	ldi	r24, 0x45	; 69
     99a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	while((TIFR1 & (1<<ICF1))==0);//wait for rising edge on ICP1/PB0
     99e:	b5 9b       	sbis	0x16, 5	; 22
     9a0:	fe cf       	rjmp	.-4      	; 0x99e <getDistance+0x34>
	timeToRisingEdge = ICR1;//save rising edge delay
     9a2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     9a6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	TIFR1 = (1<<ICF1);//clear ICF1 flag so this can be performed again
     9aa:	20 e2       	ldi	r18, 0x20	; 32
     9ac:	26 bb       	out	0x16, r18	; 22
	
	TCCR1B = 0x05; //start counting till falling edge, prescaler of 1024
     9ae:	25 e0       	ldi	r18, 0x05	; 5
     9b0:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	while ((TIFR1 & (1 <<ICF1)) == 0); //wait for falling edge of ICP1/PB0
     9b4:	b5 9b       	sbis	0x16, 5	; 22
     9b6:	fe cf       	rjmp	.-4      	; 0x9b4 <getDistance+0x4a>
	timeToFallingEdge = ICR1;
     9b8:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     9bc:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	TIFR1 = (1 <<ICF1); //clear ICF1 flag to be done again
     9c0:	20 e2       	ldi	r18, 0x20	; 32
     9c2:	26 bb       	out	0x16, r18	; 22
	
	pulseWidth = timeToFallingEdge - timeToRisingEdge; //time delay between edges
     9c4:	68 1b       	sub	r22, r24
     9c6:	79 0b       	sbc	r23, r25
	distance = pulseWidth * 1.098;//one way distance to target in cm
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 15 09 	call	0x122a	; 0x122a <__floatunsisf>
     9d0:	24 e4       	ldi	r18, 0x44	; 68
     9d2:	3b e8       	ldi	r19, 0x8B	; 139
     9d4:	4c e8       	ldi	r20, 0x8C	; 140
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 cc 09 	call	0x1398	; 0x1398 <__mulsf3>
     9dc:	0e 94 df 08 	call	0x11be	; 0x11be <__fixsfsi>
	
	if(distance <47){//person is within 1.5 feet of the sensor
     9e0:	6f 32       	cpi	r22, 0x2F	; 47
     9e2:	71 05       	cpc	r23, r1
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <getDistance+0x7e>
     9e6:	f1 c0       	rjmp	.+482    	; 0xbca <getDistance+0x260>
		//with TIMER0,  flags interrupt ~61/sec. if we want to see if this last for 2 seconds, we set a variable to increment each time interrupt is called and wait for it to get greater than 122
		TCCR0A = 0x00;//normal mode
     9e8:	14 bc       	out	0x24, r1	; 36
		TCCR0B = 5;//normal mode, 1024 prescaler
     9ea:	85 e0       	ldi	r24, 0x05	; 5
     9ec:	85 bd       	out	0x25, r24	; 37
		TIMSK0 = (1<<TOIE0);//enable timer 0 interrupt
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		sei();//enable global interrupt
     9f4:	78 94       	sei
		distanceCount = 0;
     9f6:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <distanceCount+0x1>
     9fa:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <distanceCount>
		while((distance <47) && distanceCount<150){
     9fe:	7a c0       	rjmp	.+244    	; 0xaf4 <getDistance+0x18a>
			
			PORTB |= (1<<TRIGGER);//provide 10.0 us pulse to trigger pin
     a00:	85 b1       	in	r24, 0x05	; 5
     a02:	82 60       	ori	r24, 0x02	; 2
     a04:	85 b9       	out	0x05, r24	; 5
     a06:	85 e3       	ldi	r24, 0x35	; 53
     a08:	8a 95       	dec	r24
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <getDistance+0x9e>
     a0c:	00 00       	nop
			_delay_us(10.);
			PORTB &= ~(1<<TRIGGER);
     a0e:	85 b1       	in	r24, 0x05	; 5
     a10:	8d 7f       	andi	r24, 0xFD	; 253
     a12:	85 b9       	out	0x05, r24	; 5
			TCNT1 = 0x00;
     a14:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     a18:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			TCCR1B = 0x45; //start counting till rising edge with prescaler 1024
     a1c:	85 e4       	ldi	r24, 0x45	; 69
     a1e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
			while((TIFR1 & (1<<ICF1))==0);//wait for rising edge on ICP1/PB0
     a22:	b5 9b       	sbis	0x16, 5	; 22
     a24:	fe cf       	rjmp	.-4      	; 0xa22 <getDistance+0xb8>
			timeToRisingEdge = ICR1;//save rising edge delay
     a26:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     a2a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
			TIFR1 = (1<<ICF1);//clear ICF1 flag so this can be performed again
     a2e:	20 e2       	ldi	r18, 0x20	; 32
     a30:	26 bb       	out	0x16, r18	; 22
			
			TCCR1B = 0x05; //start counting till falling edge, prescaler of 1024
     a32:	25 e0       	ldi	r18, 0x05	; 5
     a34:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
			while ((TIFR1 & (1 <<ICF1)) == 0); //wait for falling edge of ICP1/PB0
     a38:	b5 9b       	sbis	0x16, 5	; 22
     a3a:	fe cf       	rjmp	.-4      	; 0xa38 <getDistance+0xce>
			timeToFallingEdge = ICR1;
     a3c:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     a40:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
			TIFR1 = (1 <<ICF1); //clear ICF1 flag to be done again
     a44:	20 e2       	ldi	r18, 0x20	; 32
     a46:	26 bb       	out	0x16, r18	; 22
			
			pulseWidth = timeToFallingEdge - timeToRisingEdge; //time delay between edges
     a48:	68 1b       	sub	r22, r24
     a4a:	79 0b       	sbc	r23, r25
			distance = pulseWidth * 1.098;//one way distance to target in cm
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 15 09 	call	0x122a	; 0x122a <__floatunsisf>
     a54:	24 e4       	ldi	r18, 0x44	; 68
     a56:	3b e8       	ldi	r19, 0x8B	; 139
     a58:	4c e8       	ldi	r20, 0x8C	; 140
     a5a:	5f e3       	ldi	r21, 0x3F	; 63
     a5c:	0e 94 cc 09 	call	0x1398	; 0x1398 <__mulsf3>
     a60:	0e 94 df 08 	call	0x11be	; 0x11be <__fixsfsi>
			
			if(distanceCount>122){
     a64:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <distanceCount>
     a68:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <distanceCount+0x1>
     a6c:	8b 37       	cpi	r24, 0x7B	; 123
     a6e:	91 05       	cpc	r25, r1
     a70:	0c f4       	brge	.+2      	; 0xa74 <getDistance+0x10a>
     a72:	40 c0       	rjmp	.+128    	; 0xaf4 <getDistance+0x18a>
				led_reset();
     a74:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
				lcd_puts("Person exiting room");
     a78:	89 e0       	ldi	r24, 0x09	; 9
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
				occ = occ-1;
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	5f e3       	ldi	r21, 0x3F	; 63
     a88:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <occ>
     a8c:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <occ+0x1>
     a90:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <occ+0x2>
     a94:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <occ+0x3>
     a98:	0e 94 fb 07 	call	0xff6	; 0xff6 <__subsf3>
     a9c:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <occ>
     aa0:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <occ+0x1>
     aa4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <occ+0x2>
     aa8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <occ+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aac:	9f ef       	ldi	r25, 0xFF	; 255
     aae:	27 ea       	ldi	r18, 0xA7	; 167
     ab0:	81 e6       	ldi	r24, 0x61	; 97
     ab2:	91 50       	subi	r25, 0x01	; 1
     ab4:	20 40       	sbci	r18, 0x00	; 0
     ab6:	80 40       	sbci	r24, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <getDistance+0x148>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <getDistance+0x152>
     abc:	00 00       	nop
				_delay_ms(2000);
				PORTB |= (1<<motor);//turn on motor
     abe:	85 b1       	in	r24, 0x05	; 5
     ac0:	84 60       	ori	r24, 0x04	; 4
     ac2:	85 b9       	out	0x05, r24	; 5
     ac4:	9f ef       	ldi	r25, 0xFF	; 255
     ac6:	29 e6       	ldi	r18, 0x69	; 105
     ac8:	88 e1       	ldi	r24, 0x18	; 24
     aca:	91 50       	subi	r25, 0x01	; 1
     acc:	20 40       	sbci	r18, 0x00	; 0
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	e1 f7       	brne	.-8      	; 0xaca <getDistance+0x160>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <getDistance+0x16a>
     ad4:	00 00       	nop
				_delay_ms(500);
				PORTB &= ~(1<<motor); //turn off motor
     ad6:	85 b1       	in	r24, 0x05	; 5
     ad8:	8b 7f       	andi	r24, 0xFB	; 251
     ada:	85 b9       	out	0x05, r24	; 5
     adc:	9f ef       	ldi	r25, 0xFF	; 255
     ade:	29 e6       	ldi	r18, 0x69	; 105
     ae0:	88 e1       	ldi	r24, 0x18	; 24
     ae2:	91 50       	subi	r25, 0x01	; 1
     ae4:	20 40       	sbci	r18, 0x00	; 0
     ae6:	80 40       	sbci	r24, 0x00	; 0
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <getDistance+0x178>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <getDistance+0x182>
     aec:	00 00       	nop
				_delay_ms(500);
				led_reset();
     aee:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
				break;
     af2:	0b c0       	rjmp	.+22     	; 0xb0a <getDistance+0x1a0>
		TCCR0A = 0x00;//normal mode
		TCCR0B = 5;//normal mode, 1024 prescaler
		TIMSK0 = (1<<TOIE0);//enable timer 0 interrupt
		sei();//enable global interrupt
		distanceCount = 0;
		while((distance <47) && distanceCount<150){
     af4:	6f 32       	cpi	r22, 0x2F	; 47
     af6:	71 05       	cpc	r23, r1
     af8:	44 f4       	brge	.+16     	; 0xb0a <getDistance+0x1a0>
     afa:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <distanceCount>
     afe:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <distanceCount+0x1>
     b02:	86 39       	cpi	r24, 0x96	; 150
     b04:	91 05       	cpc	r25, r1
     b06:	0c f4       	brge	.+2      	; 0xb0a <getDistance+0x1a0>
     b08:	7b cf       	rjmp	.-266    	; 0xa00 <getDistance+0x96>
				led_reset();
				break;
				}
			
		}
		percentage = occ / maxOcc;//make sure occupancy is up to date
     b0a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <maxOcc>
     b0e:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <maxOcc+0x1>
     b12:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <maxOcc+0x2>
     b16:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <maxOcc+0x3>
     b1a:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <occ>
     b1e:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <occ+0x1>
     b22:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <occ+0x2>
     b26:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <occ+0x3>
     b2a:	0e 94 6d 08 	call	0x10da	; 0x10da <__divsf3>
     b2e:	60 93 64 03 	sts	0x0364, r22	; 0x800364 <percentage>
     b32:	70 93 65 03 	sts	0x0365, r23	; 0x800365 <percentage+0x1>
     b36:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <percentage+0x2>
     b3a:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <percentage+0x3>
		
		if(percentage <= 0.4){//if occupancy is below 40%, turn on green LED and turn off yellow and red
     b3e:	2d ec       	ldi	r18, 0xCD	; 205
     b40:	3c ec       	ldi	r19, 0xCC	; 204
     b42:	4c ec       	ldi	r20, 0xCC	; 204
     b44:	5e e3       	ldi	r21, 0x3E	; 62
     b46:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__cmpsf2>
     b4a:	18 16       	cp	r1, r24
     b4c:	34 f0       	brlt	.+12     	; 0xb5a <getDistance+0x1f0>
			PORTD |= (1<<greenOccpin);
     b4e:	8b b1       	in	r24, 0x0b	; 11
     b50:	88 60       	ori	r24, 0x08	; 8
     b52:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<yellowOccin) & ~(1<<redOccpin);
     b54:	8b b1       	in	r24, 0x0b	; 11
     b56:	8f 7c       	andi	r24, 0xCF	; 207
     b58:	8b b9       	out	0x0b, r24	; 11
		}
		
		if((percentage >0.4) && (percentage <0.8)){ //if occupancy is between 41% and 79%, yellow LED on, other 2 off
     b5a:	c0 90 64 03 	lds	r12, 0x0364	; 0x800364 <percentage>
     b5e:	d0 90 65 03 	lds	r13, 0x0365	; 0x800365 <percentage+0x1>
     b62:	e0 90 66 03 	lds	r14, 0x0366	; 0x800366 <percentage+0x2>
     b66:	f0 90 67 03 	lds	r15, 0x0367	; 0x800367 <percentage+0x3>
     b6a:	2d ec       	ldi	r18, 0xCD	; 205
     b6c:	3c ec       	ldi	r19, 0xCC	; 204
     b6e:	4c ec       	ldi	r20, 0xCC	; 204
     b70:	5e e3       	ldi	r21, 0x3E	; 62
     b72:	c7 01       	movw	r24, r14
     b74:	b6 01       	movw	r22, r12
     b76:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     b7a:	18 16       	cp	r1, r24
     b7c:	84 f4       	brge	.+32     	; 0xb9e <getDistance+0x234>
     b7e:	2d ec       	ldi	r18, 0xCD	; 205
     b80:	3c ec       	ldi	r19, 0xCC	; 204
     b82:	4c e4       	ldi	r20, 0x4C	; 76
     b84:	5f e3       	ldi	r21, 0x3F	; 63
     b86:	c7 01       	movw	r24, r14
     b88:	b6 01       	movw	r22, r12
     b8a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__cmpsf2>
     b8e:	88 23       	and	r24, r24
     b90:	34 f4       	brge	.+12     	; 0xb9e <getDistance+0x234>
			PORTD |= (1<<yellowOccin);
     b92:	8b b1       	in	r24, 0x0b	; 11
     b94:	80 61       	ori	r24, 0x10	; 16
     b96:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<greenOccpin) & ~(1<<redOccpin);
     b98:	8b b1       	in	r24, 0x0b	; 11
     b9a:	87 7d       	andi	r24, 0xD7	; 215
     b9c:	8b b9       	out	0x0b, r24	; 11
		}
		
		if(percentage >= 0.8){
     b9e:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <percentage>
     ba2:	70 91 65 03 	lds	r23, 0x0365	; 0x800365 <percentage+0x1>
     ba6:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <percentage+0x2>
     baa:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <percentage+0x3>
     bae:	2d ec       	ldi	r18, 0xCD	; 205
     bb0:	3c ec       	ldi	r19, 0xCC	; 204
     bb2:	4c e4       	ldi	r20, 0x4C	; 76
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     bba:	88 23       	and	r24, r24
     bbc:	34 f0       	brlt	.+12     	; 0xbca <getDistance+0x260>
			PORTD |= (1<<redOccpin);
     bbe:	8b b1       	in	r24, 0x0b	; 11
     bc0:	80 62       	ori	r24, 0x20	; 32
     bc2:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<greenOccpin) & ~(1<<yellowOccin);
     bc4:	8b b1       	in	r24, 0x0b	; 11
     bc6:	87 7e       	andi	r24, 0xE7	; 231
     bc8:	8b b9       	out	0x0b, r24	; 11
		}
		
	}
}
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	08 95       	ret

00000bd4 <screeningQuestions>:
}


int screeningQuestions(void){//return 1 if symptoms are found, 0 if none
	//with 1024 clock prescalar, overflow every 15625, get it so that interrupt called once a second and increment a value
	counter = 0;//used to check how many seconds passed
     bd4:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <counter+0x1>
     bd8:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <counter>
	TCNT1 = 65536 - 15625;//should overflow once a second
     bdc:	87 ef       	ldi	r24, 0xF7	; 247
     bde:	92 ec       	ldi	r25, 0xC2	; 194
     be0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     be4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0x00;//set timer 1 normal mode
     be8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 5;//normal mode, 1024 clock prescaler
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 <<TOIE1);//enable timer 1 interrupt
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei();//enable global interrupt 
     bf8:	78 94       	sei
	led_reset();
     bfa:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
	lcd_puts("Have you experienced\r\nany of these\r\nsymptoms in the\r\npast 48 hours");
     bfe:	8d e1       	ldi	r24, 0x1D	; 29
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
     c06:	2f ef       	ldi	r18, 0xFF	; 255
     c08:	8b e7       	ldi	r24, 0x7B	; 123
     c0a:	92 e9       	ldi	r25, 0x92	; 146
     c0c:	21 50       	subi	r18, 0x01	; 1
     c0e:	80 40       	sbci	r24, 0x00	; 0
     c10:	90 40       	sbci	r25, 0x00	; 0
     c12:	e1 f7       	brne	.-8      	; 0xc0c <screeningQuestions+0x38>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <screeningQuestions+0x42>
     c16:	00 00       	nop
	_delay_ms(3000);
	led_reset();
     c18:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
	lcd_puts("Have you had fever\r\nchills or a cough?\r\nNo=Left Yes=Right");
     c1c:	80 e6       	ldi	r24, 0x60	; 96
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
	while(counter <=65){
     c24:	1a c0       	rjmp	.+52     	; 0xc5a <screeningQuestions+0x86>
		if((PIND & (1<<yesbutton))==0){
     c26:	4a 99       	sbic	0x09, 2	; 9
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <screeningQuestions+0x60>
			led_reset();
     c2a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
			return 1;//return 1 saying that COVID symptom found
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	08 95       	ret
		}
		if((PIND & (1<<nobutton))==0){
     c34:	49 99       	sbic	0x09, 1	; 9
     c36:	0a c0       	rjmp	.+20     	; 0xc4c <screeningQuestions+0x78>
     c38:	2f ef       	ldi	r18, 0xFF	; 255
     c3a:	89 e6       	ldi	r24, 0x69	; 105
     c3c:	98 e1       	ldi	r25, 0x18	; 24
     c3e:	21 50       	subi	r18, 0x01	; 1
     c40:	80 40       	sbci	r24, 0x00	; 0
     c42:	90 40       	sbci	r25, 0x00	; 0
     c44:	e1 f7       	brne	.-8      	; 0xc3e <screeningQuestions+0x6a>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <screeningQuestions+0x74>
     c48:	00 00       	nop
     c4a:	0e c0       	rjmp	.+28     	; 0xc68 <screeningQuestions+0x94>
			_delay_ms(500);
			break;//break out of while loop and keep going
		}
		if(counter >60){
     c4c:	cd 97       	sbiw	r24, 0x3d	; 61
     c4e:	2c f0       	brlt	.+10     	; 0xc5a <screeningQuestions+0x86>
			led_reset();
     c50:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
			return 2;
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	08 95       	ret
	led_reset();
	lcd_puts("Have you experienced\r\nany of these\r\nsymptoms in the\r\npast 48 hours");
	_delay_ms(3000);
	led_reset();
	lcd_puts("Have you had fever\r\nchills or a cough?\r\nNo=Left Yes=Right");
	while(counter <=65){
     c5a:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <counter>
     c5e:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <counter+0x1>
     c62:	82 34       	cpi	r24, 0x42	; 66
     c64:	91 05       	cpc	r25, r1
     c66:	fc f2       	brlt	.-66     	; 0xc26 <screeningQuestions+0x52>
		if(counter >60){
			led_reset();
			return 2;
		}	
	}
	getDistance();//distance check
     c68:	0e 94 b5 04 	call	0x96a	; 0x96a <getDistance>
	
	led_reset();
     c6c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
	lcd_puts("Shortness of breath,\r\ndifficulty breathing\r\nor fatigue?\r\nNo=left, Yes=right");
     c70:	8a e9       	ldi	r24, 0x9A	; 154
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
	counter = 0;//reset counter value
     c78:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <counter+0x1>
     c7c:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <counter>
	while(counter <=65){
     c80:	1d c0       	rjmp	.+58     	; 0xcbc <screeningQuestions+0xe8>
		if((PIND & (1<<yesbutton))==0){
			led_reset();
     c82:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
			return 1;//return 1 saying that COVID symptom found
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	08 95       	ret
		}
		if((PIND & (1<<nobutton))==0){
     c8c:	49 99       	sbic	0x09, 1	; 9
     c8e:	16 c0       	rjmp	.+44     	; 0xcbc <screeningQuestions+0xe8>
     c90:	2f ef       	ldi	r18, 0xFF	; 255
     c92:	89 e6       	ldi	r24, 0x69	; 105
     c94:	98 e1       	ldi	r25, 0x18	; 24
     c96:	21 50       	subi	r18, 0x01	; 1
     c98:	80 40       	sbci	r24, 0x00	; 0
     c9a:	90 40       	sbci	r25, 0x00	; 0
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <screeningQuestions+0xc2>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <screeningQuestions+0xcc>
     ca0:	00 00       	nop
			led_reset();
			return 2;
		}
		
	}
	getDistance();//distance check
     ca2:	0e 94 b5 04 	call	0x96a	; 0x96a <getDistance>
	
	led_reset();
     ca6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
	lcd_puts("Muscle,body or\r\nheadaches?\r\nNo=Left, Yes=Right");
     caa:	86 ee       	ldi	r24, 0xE6	; 230
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
	counter = 0;//reset counter value
     cb2:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <counter+0x1>
     cb6:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <counter>
	while(counter <=65){
     cba:	20 c0       	rjmp	.+64     	; 0xcfc <screeningQuestions+0x128>
	
	led_reset();
	lcd_puts("Shortness of breath,\r\ndifficulty breathing\r\nor fatigue?\r\nNo=left, Yes=right");
	counter = 0;//reset counter value
	while(counter <=65){
		if((PIND & (1<<yesbutton))==0){
     cbc:	4a 99       	sbic	0x09, 2	; 9
     cbe:	e6 cf       	rjmp	.-52     	; 0xc8c <screeningQuestions+0xb8>
     cc0:	e0 cf       	rjmp	.-64     	; 0xc82 <screeningQuestions+0xae>
	led_reset();
	lcd_puts("Muscle,body or\r\nheadaches?\r\nNo=Left, Yes=Right");
	counter = 0;//reset counter value
	while(counter <=65){
		if((PIND & (1<<yesbutton))==0){
			led_reset();
     cc2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
			return 1;//return 1 saying that COVID symptom found
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	08 95       	ret
		}
		if((PIND & (1<<nobutton))==0){
     ccc:	49 99       	sbic	0x09, 1	; 9
     cce:	16 c0       	rjmp	.+44     	; 0xcfc <screeningQuestions+0x128>
     cd0:	2f ef       	ldi	r18, 0xFF	; 255
     cd2:	89 e6       	ldi	r24, 0x69	; 105
     cd4:	98 e1       	ldi	r25, 0x18	; 24
     cd6:	21 50       	subi	r18, 0x01	; 1
     cd8:	80 40       	sbci	r24, 0x00	; 0
     cda:	90 40       	sbci	r25, 0x00	; 0
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <screeningQuestions+0x102>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <screeningQuestions+0x10c>
     ce0:	00 00       	nop
			led_reset();
			return 2;
		}
		
	}
	getDistance();//distance check
     ce2:	0e 94 b5 04 	call	0x96a	; 0x96a <getDistance>
	
	led_reset();
     ce6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
	lcd_puts("New loss of\r\ntaste or smell?\r\nNo=Left, Yes=Right");
     cea:	85 e1       	ldi	r24, 0x15	; 21
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
	counter = 0;//reset counter value
     cf2:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <counter+0x1>
     cf6:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <counter>
	while(counter <=65){
     cfa:	18 c0       	rjmp	.+48     	; 0xd2c <screeningQuestions+0x158>
	
	led_reset();
	lcd_puts("Muscle,body or\r\nheadaches?\r\nNo=Left, Yes=Right");
	counter = 0;//reset counter value
	while(counter <=65){
		if((PIND & (1<<yesbutton))==0){
     cfc:	4a 99       	sbic	0x09, 2	; 9
     cfe:	e6 cf       	rjmp	.-52     	; 0xccc <screeningQuestions+0xf8>
     d00:	e0 cf       	rjmp	.-64     	; 0xcc2 <screeningQuestions+0xee>
	led_reset();
	lcd_puts("New loss of\r\ntaste or smell?\r\nNo=Left, Yes=Right");
	counter = 0;//reset counter value
	while(counter <=65){
		if((PIND & (1<<yesbutton))==0){
			led_reset();
     d02:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
			return 1;//return 1 saying that COVID symptom found
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	08 95       	ret
		}
		if((PIND & (1<<nobutton))==0){
     d0c:	49 99       	sbic	0x09, 1	; 9
     d0e:	0e c0       	rjmp	.+28     	; 0xd2c <screeningQuestions+0x158>
     d10:	2f ef       	ldi	r18, 0xFF	; 255
     d12:	89 e6       	ldi	r24, 0x69	; 105
     d14:	98 e1       	ldi	r25, 0x18	; 24
     d16:	21 50       	subi	r18, 0x01	; 1
     d18:	80 40       	sbci	r24, 0x00	; 0
     d1a:	90 40       	sbci	r25, 0x00	; 0
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <screeningQuestions+0x142>
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <screeningQuestions+0x14c>
     d20:	00 00       	nop
			led_reset();
			return 2;
		}
		
	}
	TIMSK1 = (0 <<TOIE1);//disable timer 1 interrupt
     d22:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	return 0;
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	08 95       	ret
	
	led_reset();
	lcd_puts("New loss of\r\ntaste or smell?\r\nNo=Left, Yes=Right");
	counter = 0;//reset counter value
	while(counter <=65){
		if((PIND & (1<<yesbutton))==0){
     d2c:	4a 99       	sbic	0x09, 2	; 9
     d2e:	ee cf       	rjmp	.-36     	; 0xd0c <screeningQuestions+0x138>
     d30:	e8 cf       	rjmp	.-48     	; 0xd02 <screeningQuestions+0x12e>

00000d32 <main>:
void getDistance(void);//function to get distance from door


int main(void)
{
	lcd_init(LCD_DISP_ON);//initialize OLED
     d32:	8f ea       	ldi	r24, 0xAF	; 175
     d34:	0e 94 93 02 	call	0x526	; 0x526 <lcd_init>
	led_reset();
     d38:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
    
	DDRD |= (1<<greenOccpin) | (1<<yellowOccin) | (1<<redOccpin) | (1<<greenCheck) | (1<<redCheck);//set occupancy LEDs & blinking LED to outputs and buttons to inputs 
     d3c:	8a b1       	in	r24, 0x0a	; 10
     d3e:	88 6f       	ori	r24, 0xF8	; 248
     d40:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<startbutton) | (1<<nobutton) | (1<<yesbutton);//PD0, PD1, PD2 input pullup, if PIND0-2 is low, switched closed
     d42:	8b b1       	in	r24, 0x0b	; 11
     d44:	87 60       	ori	r24, 0x07	; 7
     d46:	8b b9       	out	0x0b, r24	; 11
	DDRB |= (1<<motor);//set motor pin to output
     d48:	84 b1       	in	r24, 0x04	; 4
     d4a:	84 60       	ori	r24, 0x04	; 4
     d4c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<motor);//make sure motor is off at start
     d4e:	85 b1       	in	r24, 0x05	; 5
     d50:	8b 7f       	andi	r24, 0xFB	; 251
     d52:	85 b9       	out	0x05, r24	; 5
	
	
    while (1) 
    {
		percentage = occ /maxOcc;//calculate current percentage
     d54:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <maxOcc>
     d58:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <maxOcc+0x1>
     d5c:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <maxOcc+0x2>
     d60:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <maxOcc+0x3>
     d64:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <occ>
     d68:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <occ+0x1>
     d6c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <occ+0x2>
     d70:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <occ+0x3>
     d74:	0e 94 6d 08 	call	0x10da	; 0x10da <__divsf3>
     d78:	60 93 64 03 	sts	0x0364, r22	; 0x800364 <percentage>
     d7c:	70 93 65 03 	sts	0x0365, r23	; 0x800365 <percentage+0x1>
     d80:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <percentage+0x2>
     d84:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <percentage+0x3>
		
		if(percentage <= 0.4){//if occupancy is below 40%, turn on green LED and turn off yellow and red
     d88:	2d ec       	ldi	r18, 0xCD	; 205
     d8a:	3c ec       	ldi	r19, 0xCC	; 204
     d8c:	4c ec       	ldi	r20, 0xCC	; 204
     d8e:	5e e3       	ldi	r21, 0x3E	; 62
     d90:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__cmpsf2>
     d94:	18 16       	cp	r1, r24
     d96:	34 f0       	brlt	.+12     	; 0xda4 <main+0x72>
			PORTD |= (1<<greenOccpin);
     d98:	8b b1       	in	r24, 0x0b	; 11
     d9a:	88 60       	ori	r24, 0x08	; 8
     d9c:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<yellowOccin) & ~(1<<redOccpin);
     d9e:	8b b1       	in	r24, 0x0b	; 11
     da0:	8f 7c       	andi	r24, 0xCF	; 207
     da2:	8b b9       	out	0x0b, r24	; 11
		}
		
		if((percentage >0.4) && (percentage <0.8)){ //if occupancy is between 41% and 79%, yellow LED on, other 2 off
     da4:	c0 90 64 03 	lds	r12, 0x0364	; 0x800364 <percentage>
     da8:	d0 90 65 03 	lds	r13, 0x0365	; 0x800365 <percentage+0x1>
     dac:	e0 90 66 03 	lds	r14, 0x0366	; 0x800366 <percentage+0x2>
     db0:	f0 90 67 03 	lds	r15, 0x0367	; 0x800367 <percentage+0x3>
     db4:	2d ec       	ldi	r18, 0xCD	; 205
     db6:	3c ec       	ldi	r19, 0xCC	; 204
     db8:	4c ec       	ldi	r20, 0xCC	; 204
     dba:	5e e3       	ldi	r21, 0x3E	; 62
     dbc:	c7 01       	movw	r24, r14
     dbe:	b6 01       	movw	r22, r12
     dc0:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     dc4:	18 16       	cp	r1, r24
     dc6:	84 f4       	brge	.+32     	; 0xde8 <main+0xb6>
     dc8:	2d ec       	ldi	r18, 0xCD	; 205
     dca:	3c ec       	ldi	r19, 0xCC	; 204
     dcc:	4c e4       	ldi	r20, 0x4C	; 76
     dce:	5f e3       	ldi	r21, 0x3F	; 63
     dd0:	c7 01       	movw	r24, r14
     dd2:	b6 01       	movw	r22, r12
     dd4:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__cmpsf2>
     dd8:	88 23       	and	r24, r24
     dda:	34 f4       	brge	.+12     	; 0xde8 <main+0xb6>
			PORTD |= (1<<yellowOccin);
     ddc:	8b b1       	in	r24, 0x0b	; 11
     dde:	80 61       	ori	r24, 0x10	; 16
     de0:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<greenOccpin) & ~(1<<redOccpin);
     de2:	8b b1       	in	r24, 0x0b	; 11
     de4:	87 7d       	andi	r24, 0xD7	; 215
     de6:	8b b9       	out	0x0b, r24	; 11
		}
		
		if(percentage >= 0.8){
     de8:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <percentage>
     dec:	70 91 65 03 	lds	r23, 0x0365	; 0x800365 <percentage+0x1>
     df0:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <percentage+0x2>
     df4:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <percentage+0x3>
     df8:	2d ec       	ldi	r18, 0xCD	; 205
     dfa:	3c ec       	ldi	r19, 0xCC	; 204
     dfc:	4c e4       	ldi	r20, 0x4C	; 76
     dfe:	5f e3       	ldi	r21, 0x3F	; 63
     e00:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     e04:	88 23       	and	r24, r24
     e06:	cc f1       	brlt	.+114    	; 0xe7a <main+0x148>
			PORTD |= (1<<redOccpin);
     e08:	8b b1       	in	r24, 0x0b	; 11
     e0a:	80 62       	ori	r24, 0x20	; 32
     e0c:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<greenOccpin) & ~(1<<yellowOccin);
     e0e:	8b b1       	in	r24, 0x0b	; 11
     e10:	87 7e       	andi	r24, 0xE7	; 231
     e12:	8b b9       	out	0x0b, r24	; 11
     e14:	32 c0       	rjmp	.+100    	; 0xe7a <main+0x148>
		}
		
		while(((PIND & (1<<startbutton))!=0) || (percentage >= 0.8)){//keep looping until start button is pressed
			getDistance();//distance check
     e16:	0e 94 b5 04 	call	0x96a	; 0x96a <getDistance>
			if(percentage < 0.8){
     e1a:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <percentage>
     e1e:	70 91 65 03 	lds	r23, 0x0365	; 0x800365 <percentage+0x1>
     e22:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <percentage+0x2>
     e26:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <percentage+0x3>
     e2a:	2d ec       	ldi	r18, 0xCD	; 205
     e2c:	3c ec       	ldi	r19, 0xCC	; 204
     e2e:	4c e4       	ldi	r20, 0x4C	; 76
     e30:	5f e3       	ldi	r21, 0x3F	; 63
     e32:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__cmpsf2>
     e36:	88 23       	and	r24, r24
     e38:	44 f4       	brge	.+16     	; 0xe4a <main+0x118>
				lcd_gotoxy(0,0);
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
				lcd_puts("Welcome to the COVID\r\nScreening. Press the \r\nfar left button to\r\nbegin");//show message on OLED screen
     e42:	86 e4       	ldi	r24, 0x46	; 70
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
			}
			if(percentage >=0.8){
     e4a:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <percentage>
     e4e:	70 91 65 03 	lds	r23, 0x0365	; 0x800365 <percentage+0x1>
     e52:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <percentage+0x2>
     e56:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <percentage+0x3>
     e5a:	2d ec       	ldi	r18, 0xCD	; 205
     e5c:	3c ec       	ldi	r19, 0xCC	; 204
     e5e:	4c e4       	ldi	r20, 0x4C	; 76
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     e66:	88 23       	and	r24, r24
     e68:	44 f0       	brlt	.+16     	; 0xe7a <main+0x148>
				lcd_gotoxy(0,0);
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_gotoxy>
				lcd_puts("Room is currently\r\nfull, please wait for\r\nlight to be yellow\r\nto start.");
     e72:	8d e8       	ldi	r24, 0x8D	; 141
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
		if(percentage >= 0.8){
			PORTD |= (1<<redOccpin);
			PORTD &= ~(1<<greenOccpin) & ~(1<<yellowOccin);
		}
		
		while(((PIND & (1<<startbutton))!=0) || (percentage >= 0.8)){//keep looping until start button is pressed
     e7a:	48 99       	sbic	0x09, 0	; 9
     e7c:	cc cf       	rjmp	.-104    	; 0xe16 <main+0xe4>
     e7e:	60 91 64 03 	lds	r22, 0x0364	; 0x800364 <percentage>
     e82:	70 91 65 03 	lds	r23, 0x0365	; 0x800365 <percentage+0x1>
     e86:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <percentage+0x2>
     e8a:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <percentage+0x3>
     e8e:	2d ec       	ldi	r18, 0xCD	; 205
     e90:	3c ec       	ldi	r19, 0xCC	; 204
     e92:	4c e4       	ldi	r20, 0x4C	; 76
     e94:	5f e3       	ldi	r21, 0x3F	; 63
     e96:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     e9a:	88 23       	and	r24, r24
     e9c:	0c f0       	brlt	.+2      	; 0xea0 <main+0x16e>
     e9e:	bb cf       	rjmp	.-138    	; 0xe16 <main+0xe4>
				lcd_gotoxy(0,0);
				lcd_puts("Room is currently\r\nfull, please wait for\r\nlight to be yellow\r\nto start.");
			}
				
		}
		led_reset();//clear led and reset screen
     ea0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
		
		while(1){
			loopbreak = screeningQuestions();
     ea4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <screeningQuestions>
     ea8:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <loopbreak+0x1>
     eac:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <loopbreak>
			if(loopbreak == 1){ //answered yes (show symptoms)
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	b1 f4       	brne	.+44     	; 0xee2 <main+0x1b0>
				getDistance();//distance check
     eb6:	0e 94 b5 04 	call	0x96a	; 0x96a <getDistance>
				led_reset();
     eba:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
				lcd_puts("Answer shows symptoms\r\ncan not allow room\r\nentrance.");
     ebe:	85 ed       	ldi	r24, 0xD5	; 213
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
				blinkRed();//blink red led
     ec6:	0e 94 94 04 	call	0x928	; 0x928 <blinkRed>
     eca:	2f ef       	ldi	r18, 0xFF	; 255
     ecc:	83 e2       	ldi	r24, 0x23	; 35
     ece:	94 ef       	ldi	r25, 0xF4	; 244
     ed0:	21 50       	subi	r18, 0x01	; 1
     ed2:	80 40       	sbci	r24, 0x00	; 0
     ed4:	90 40       	sbci	r25, 0x00	; 0
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <main+0x19e>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <main+0x1a8>
     eda:	00 00       	nop
				_delay_ms(5000);//delay for 5 seconds
				led_reset();
     edc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
				break;
     ee0:	39 cf       	rjmp	.-398    	; 0xd54 <main+0x22>
			}
			if(loopbreak == 2){//timed out
     ee2:	82 30       	cpi	r24, 0x02	; 2
     ee4:	91 05       	cpc	r25, r1
     ee6:	b1 f4       	brne	.+44     	; 0xf14 <main+0x1e2>
				getDistance();//distance check
     ee8:	0e 94 b5 04 	call	0x96a	; 0x96a <getDistance>
				led_reset();
     eec:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
				lcd_puts("Question timed out\r\nPlease start again.");
     ef0:	8a e0       	ldi	r24, 0x0A	; 10
     ef2:	93 e0       	ldi	r25, 0x03	; 3
     ef4:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
				blinkRed();//blink red led
     ef8:	0e 94 94 04 	call	0x928	; 0x928 <blinkRed>
     efc:	2f ef       	ldi	r18, 0xFF	; 255
     efe:	83 e2       	ldi	r24, 0x23	; 35
     f00:	94 ef       	ldi	r25, 0xF4	; 244
     f02:	21 50       	subi	r18, 0x01	; 1
     f04:	80 40       	sbci	r24, 0x00	; 0
     f06:	90 40       	sbci	r25, 0x00	; 0
     f08:	e1 f7       	brne	.-8      	; 0xf02 <main+0x1d0>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <main+0x1da>
     f0c:	00 00       	nop
				_delay_ms(5000);
				led_reset();
     f0e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
				break;
     f12:	20 cf       	rjmp	.-448    	; 0xd54 <main+0x22>
			}
			if(loopbreak == 0){//passed questions
     f14:	89 2b       	or	r24, r25
     f16:	31 f6       	brne	.-116    	; 0xea4 <main+0x172>
				getDistance();//distance check
     f18:	0e 94 b5 04 	call	0x96a	; 0x96a <getDistance>
				led_reset();
     f1c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
				lcd_puts("No symptoms reported\r\nPlease enter room.");
     f20:	82 e3       	ldi	r24, 0x32	; 50
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_puts>
				blinkGreen();
     f28:	0e 94 73 04 	call	0x8e6	; 0x8e6 <blinkGreen>
     f2c:	2f ef       	ldi	r18, 0xFF	; 255
     f2e:	87 ea       	ldi	r24, 0xA7	; 167
     f30:	91 e6       	ldi	r25, 0x61	; 97
     f32:	21 50       	subi	r18, 0x01	; 1
     f34:	80 40       	sbci	r24, 0x00	; 0
     f36:	90 40       	sbci	r25, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <main+0x200>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <main+0x20a>
     f3c:	00 00       	nop
				_delay_ms(2000);
				PORTB |= (1<<motor);//turn on motor
     f3e:	85 b1       	in	r24, 0x05	; 5
     f40:	84 60       	ori	r24, 0x04	; 4
     f42:	85 b9       	out	0x05, r24	; 5
     f44:	2f ef       	ldi	r18, 0xFF	; 255
     f46:	89 e6       	ldi	r24, 0x69	; 105
     f48:	98 e1       	ldi	r25, 0x18	; 24
     f4a:	21 50       	subi	r18, 0x01	; 1
     f4c:	80 40       	sbci	r24, 0x00	; 0
     f4e:	90 40       	sbci	r25, 0x00	; 0
     f50:	e1 f7       	brne	.-8      	; 0xf4a <main+0x218>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <main+0x222>
     f54:	00 00       	nop
				_delay_ms(500);
				PORTB &= ~(1<<motor); //turn off motor
     f56:	85 b1       	in	r24, 0x05	; 5
     f58:	8b 7f       	andi	r24, 0xFB	; 251
     f5a:	85 b9       	out	0x05, r24	; 5
				occ++;//increase occupancy value
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e8       	ldi	r20, 0x80	; 128
     f62:	5f e3       	ldi	r21, 0x3F	; 63
     f64:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <occ>
     f68:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <occ+0x1>
     f6c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <occ+0x2>
     f70:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <occ+0x3>
     f74:	0e 94 fc 07 	call	0xff8	; 0xff8 <__addsf3>
     f78:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <occ>
     f7c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <occ+0x1>
     f80:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <occ+0x2>
     f84:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <occ+0x3>
				
				led_reset();
     f88:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <led_reset>
				
				break;
     f8c:	e3 ce       	rjmp	.-570    	; 0xd54 <main+0x22>

00000f8e <__vector_13>:
		
	}
}


ISR(TIMER1_OVF_vect){
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
	counter++; //increments counter every overflow, so once a second
     f9c:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <counter>
     fa0:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <counter+0x1>
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <counter+0x1>
     faa:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <counter>
	TCNT1 = 65536 - 15625;
     fae:	87 ef       	ldi	r24, 0xF7	; 247
     fb0:	92 ec       	ldi	r25, 0xC2	; 194
     fb2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     fb6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_16>:

ISR(TIMER0_OVF_vect){
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
	distanceCount++;
     fd6:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <distanceCount>
     fda:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <distanceCount+0x1>
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <distanceCount+0x1>
     fe4:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <distanceCount>
	
     fe8:	9f 91       	pop	r25
     fea:	8f 91       	pop	r24
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__subsf3>:
     ff6:	50 58       	subi	r21, 0x80	; 128

00000ff8 <__addsf3>:
     ff8:	bb 27       	eor	r27, r27
     ffa:	aa 27       	eor	r26, r26
     ffc:	0e 94 13 08 	call	0x1026	; 0x1026 <__addsf3x>
    1000:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__fp_round>
    1004:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fp_pscA>
    1008:	38 f0       	brcs	.+14     	; 0x1018 <__addsf3+0x20>
    100a:	0e 94 86 09 	call	0x130c	; 0x130c <__fp_pscB>
    100e:	20 f0       	brcs	.+8      	; 0x1018 <__addsf3+0x20>
    1010:	39 f4       	brne	.+14     	; 0x1020 <__addsf3+0x28>
    1012:	9f 3f       	cpi	r25, 0xFF	; 255
    1014:	19 f4       	brne	.+6      	; 0x101c <__addsf3+0x24>
    1016:	26 f4       	brtc	.+8      	; 0x1020 <__addsf3+0x28>
    1018:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__fp_nan>
    101c:	0e f4       	brtc	.+2      	; 0x1020 <__addsf3+0x28>
    101e:	e0 95       	com	r30
    1020:	e7 fb       	bst	r30, 7
    1022:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__fp_inf>

00001026 <__addsf3x>:
    1026:	e9 2f       	mov	r30, r25
    1028:	0e 94 9e 09 	call	0x133c	; 0x133c <__fp_split3>
    102c:	58 f3       	brcs	.-42     	; 0x1004 <__addsf3+0xc>
    102e:	ba 17       	cp	r27, r26
    1030:	62 07       	cpc	r22, r18
    1032:	73 07       	cpc	r23, r19
    1034:	84 07       	cpc	r24, r20
    1036:	95 07       	cpc	r25, r21
    1038:	20 f0       	brcs	.+8      	; 0x1042 <__addsf3x+0x1c>
    103a:	79 f4       	brne	.+30     	; 0x105a <__addsf3x+0x34>
    103c:	a6 f5       	brtc	.+104    	; 0x10a6 <__addsf3x+0x80>
    103e:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__fp_zero>
    1042:	0e f4       	brtc	.+2      	; 0x1046 <__addsf3x+0x20>
    1044:	e0 95       	com	r30
    1046:	0b 2e       	mov	r0, r27
    1048:	ba 2f       	mov	r27, r26
    104a:	a0 2d       	mov	r26, r0
    104c:	0b 01       	movw	r0, r22
    104e:	b9 01       	movw	r22, r18
    1050:	90 01       	movw	r18, r0
    1052:	0c 01       	movw	r0, r24
    1054:	ca 01       	movw	r24, r20
    1056:	a0 01       	movw	r20, r0
    1058:	11 24       	eor	r1, r1
    105a:	ff 27       	eor	r31, r31
    105c:	59 1b       	sub	r21, r25
    105e:	99 f0       	breq	.+38     	; 0x1086 <__addsf3x+0x60>
    1060:	59 3f       	cpi	r21, 0xF9	; 249
    1062:	50 f4       	brcc	.+20     	; 0x1078 <__addsf3x+0x52>
    1064:	50 3e       	cpi	r21, 0xE0	; 224
    1066:	68 f1       	brcs	.+90     	; 0x10c2 <__addsf3x+0x9c>
    1068:	1a 16       	cp	r1, r26
    106a:	f0 40       	sbci	r31, 0x00	; 0
    106c:	a2 2f       	mov	r26, r18
    106e:	23 2f       	mov	r18, r19
    1070:	34 2f       	mov	r19, r20
    1072:	44 27       	eor	r20, r20
    1074:	58 5f       	subi	r21, 0xF8	; 248
    1076:	f3 cf       	rjmp	.-26     	; 0x105e <__addsf3x+0x38>
    1078:	46 95       	lsr	r20
    107a:	37 95       	ror	r19
    107c:	27 95       	ror	r18
    107e:	a7 95       	ror	r26
    1080:	f0 40       	sbci	r31, 0x00	; 0
    1082:	53 95       	inc	r21
    1084:	c9 f7       	brne	.-14     	; 0x1078 <__addsf3x+0x52>
    1086:	7e f4       	brtc	.+30     	; 0x10a6 <__addsf3x+0x80>
    1088:	1f 16       	cp	r1, r31
    108a:	ba 0b       	sbc	r27, r26
    108c:	62 0b       	sbc	r22, r18
    108e:	73 0b       	sbc	r23, r19
    1090:	84 0b       	sbc	r24, r20
    1092:	ba f0       	brmi	.+46     	; 0x10c2 <__addsf3x+0x9c>
    1094:	91 50       	subi	r25, 0x01	; 1
    1096:	a1 f0       	breq	.+40     	; 0x10c0 <__addsf3x+0x9a>
    1098:	ff 0f       	add	r31, r31
    109a:	bb 1f       	adc	r27, r27
    109c:	66 1f       	adc	r22, r22
    109e:	77 1f       	adc	r23, r23
    10a0:	88 1f       	adc	r24, r24
    10a2:	c2 f7       	brpl	.-16     	; 0x1094 <__addsf3x+0x6e>
    10a4:	0e c0       	rjmp	.+28     	; 0x10c2 <__addsf3x+0x9c>
    10a6:	ba 0f       	add	r27, r26
    10a8:	62 1f       	adc	r22, r18
    10aa:	73 1f       	adc	r23, r19
    10ac:	84 1f       	adc	r24, r20
    10ae:	48 f4       	brcc	.+18     	; 0x10c2 <__addsf3x+0x9c>
    10b0:	87 95       	ror	r24
    10b2:	77 95       	ror	r23
    10b4:	67 95       	ror	r22
    10b6:	b7 95       	ror	r27
    10b8:	f7 95       	ror	r31
    10ba:	9e 3f       	cpi	r25, 0xFE	; 254
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <__addsf3x+0x9a>
    10be:	b0 cf       	rjmp	.-160    	; 0x1020 <__addsf3+0x28>
    10c0:	93 95       	inc	r25
    10c2:	88 0f       	add	r24, r24
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <__addsf3x+0xa2>
    10c6:	99 27       	eor	r25, r25
    10c8:	ee 0f       	add	r30, r30
    10ca:	97 95       	ror	r25
    10cc:	87 95       	ror	r24
    10ce:	08 95       	ret

000010d0 <__cmpsf2>:
    10d0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__fp_cmp>
    10d4:	08 f4       	brcc	.+2      	; 0x10d8 <__cmpsf2+0x8>
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	08 95       	ret

000010da <__divsf3>:
    10da:	0e 94 81 08 	call	0x1102	; 0x1102 <__divsf3x>
    10de:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__fp_round>
    10e2:	0e 94 86 09 	call	0x130c	; 0x130c <__fp_pscB>
    10e6:	58 f0       	brcs	.+22     	; 0x10fe <__divsf3+0x24>
    10e8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fp_pscA>
    10ec:	40 f0       	brcs	.+16     	; 0x10fe <__divsf3+0x24>
    10ee:	29 f4       	brne	.+10     	; 0x10fa <__divsf3+0x20>
    10f0:	5f 3f       	cpi	r21, 0xFF	; 255
    10f2:	29 f0       	breq	.+10     	; 0x10fe <__divsf3+0x24>
    10f4:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__fp_inf>
    10f8:	51 11       	cpse	r21, r1
    10fa:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>
    10fe:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__fp_nan>

00001102 <__divsf3x>:
    1102:	0e 94 9e 09 	call	0x133c	; 0x133c <__fp_split3>
    1106:	68 f3       	brcs	.-38     	; 0x10e2 <__divsf3+0x8>

00001108 <__divsf3_pse>:
    1108:	99 23       	and	r25, r25
    110a:	b1 f3       	breq	.-20     	; 0x10f8 <__divsf3+0x1e>
    110c:	55 23       	and	r21, r21
    110e:	91 f3       	breq	.-28     	; 0x10f4 <__divsf3+0x1a>
    1110:	95 1b       	sub	r25, r21
    1112:	55 0b       	sbc	r21, r21
    1114:	bb 27       	eor	r27, r27
    1116:	aa 27       	eor	r26, r26
    1118:	62 17       	cp	r22, r18
    111a:	73 07       	cpc	r23, r19
    111c:	84 07       	cpc	r24, r20
    111e:	38 f0       	brcs	.+14     	; 0x112e <__divsf3_pse+0x26>
    1120:	9f 5f       	subi	r25, 0xFF	; 255
    1122:	5f 4f       	sbci	r21, 0xFF	; 255
    1124:	22 0f       	add	r18, r18
    1126:	33 1f       	adc	r19, r19
    1128:	44 1f       	adc	r20, r20
    112a:	aa 1f       	adc	r26, r26
    112c:	a9 f3       	breq	.-22     	; 0x1118 <__divsf3_pse+0x10>
    112e:	35 d0       	rcall	.+106    	; 0x119a <__divsf3_pse+0x92>
    1130:	0e 2e       	mov	r0, r30
    1132:	3a f0       	brmi	.+14     	; 0x1142 <__divsf3_pse+0x3a>
    1134:	e0 e8       	ldi	r30, 0x80	; 128
    1136:	32 d0       	rcall	.+100    	; 0x119c <__divsf3_pse+0x94>
    1138:	91 50       	subi	r25, 0x01	; 1
    113a:	50 40       	sbci	r21, 0x00	; 0
    113c:	e6 95       	lsr	r30
    113e:	00 1c       	adc	r0, r0
    1140:	ca f7       	brpl	.-14     	; 0x1134 <__divsf3_pse+0x2c>
    1142:	2b d0       	rcall	.+86     	; 0x119a <__divsf3_pse+0x92>
    1144:	fe 2f       	mov	r31, r30
    1146:	29 d0       	rcall	.+82     	; 0x119a <__divsf3_pse+0x92>
    1148:	66 0f       	add	r22, r22
    114a:	77 1f       	adc	r23, r23
    114c:	88 1f       	adc	r24, r24
    114e:	bb 1f       	adc	r27, r27
    1150:	26 17       	cp	r18, r22
    1152:	37 07       	cpc	r19, r23
    1154:	48 07       	cpc	r20, r24
    1156:	ab 07       	cpc	r26, r27
    1158:	b0 e8       	ldi	r27, 0x80	; 128
    115a:	09 f0       	breq	.+2      	; 0x115e <__divsf3_pse+0x56>
    115c:	bb 0b       	sbc	r27, r27
    115e:	80 2d       	mov	r24, r0
    1160:	bf 01       	movw	r22, r30
    1162:	ff 27       	eor	r31, r31
    1164:	93 58       	subi	r25, 0x83	; 131
    1166:	5f 4f       	sbci	r21, 0xFF	; 255
    1168:	3a f0       	brmi	.+14     	; 0x1178 <__divsf3_pse+0x70>
    116a:	9e 3f       	cpi	r25, 0xFE	; 254
    116c:	51 05       	cpc	r21, r1
    116e:	78 f0       	brcs	.+30     	; 0x118e <__divsf3_pse+0x86>
    1170:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__fp_inf>
    1174:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>
    1178:	5f 3f       	cpi	r21, 0xFF	; 255
    117a:	e4 f3       	brlt	.-8      	; 0x1174 <__divsf3_pse+0x6c>
    117c:	98 3e       	cpi	r25, 0xE8	; 232
    117e:	d4 f3       	brlt	.-12     	; 0x1174 <__divsf3_pse+0x6c>
    1180:	86 95       	lsr	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	b7 95       	ror	r27
    1188:	f7 95       	ror	r31
    118a:	9f 5f       	subi	r25, 0xFF	; 255
    118c:	c9 f7       	brne	.-14     	; 0x1180 <__divsf3_pse+0x78>
    118e:	88 0f       	add	r24, r24
    1190:	91 1d       	adc	r25, r1
    1192:	96 95       	lsr	r25
    1194:	87 95       	ror	r24
    1196:	97 f9       	bld	r25, 7
    1198:	08 95       	ret
    119a:	e1 e0       	ldi	r30, 0x01	; 1
    119c:	66 0f       	add	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	88 1f       	adc	r24, r24
    11a2:	bb 1f       	adc	r27, r27
    11a4:	62 17       	cp	r22, r18
    11a6:	73 07       	cpc	r23, r19
    11a8:	84 07       	cpc	r24, r20
    11aa:	ba 07       	cpc	r27, r26
    11ac:	20 f0       	brcs	.+8      	; 0x11b6 <__divsf3_pse+0xae>
    11ae:	62 1b       	sub	r22, r18
    11b0:	73 0b       	sbc	r23, r19
    11b2:	84 0b       	sbc	r24, r20
    11b4:	ba 0b       	sbc	r27, r26
    11b6:	ee 1f       	adc	r30, r30
    11b8:	88 f7       	brcc	.-30     	; 0x119c <__divsf3_pse+0x94>
    11ba:	e0 95       	com	r30
    11bc:	08 95       	ret

000011be <__fixsfsi>:
    11be:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__fixunssfsi>
    11c2:	68 94       	set
    11c4:	b1 11       	cpse	r27, r1
    11c6:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>
    11ca:	08 95       	ret

000011cc <__fixunssfsi>:
    11cc:	0e 94 a6 09 	call	0x134c	; 0x134c <__fp_splitA>
    11d0:	88 f0       	brcs	.+34     	; 0x11f4 <__fixunssfsi+0x28>
    11d2:	9f 57       	subi	r25, 0x7F	; 127
    11d4:	98 f0       	brcs	.+38     	; 0x11fc <__fixunssfsi+0x30>
    11d6:	b9 2f       	mov	r27, r25
    11d8:	99 27       	eor	r25, r25
    11da:	b7 51       	subi	r27, 0x17	; 23
    11dc:	b0 f0       	brcs	.+44     	; 0x120a <__fixunssfsi+0x3e>
    11de:	e1 f0       	breq	.+56     	; 0x1218 <__fixunssfsi+0x4c>
    11e0:	66 0f       	add	r22, r22
    11e2:	77 1f       	adc	r23, r23
    11e4:	88 1f       	adc	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	1a f0       	brmi	.+6      	; 0x11f0 <__fixunssfsi+0x24>
    11ea:	ba 95       	dec	r27
    11ec:	c9 f7       	brne	.-14     	; 0x11e0 <__fixunssfsi+0x14>
    11ee:	14 c0       	rjmp	.+40     	; 0x1218 <__fixunssfsi+0x4c>
    11f0:	b1 30       	cpi	r27, 0x01	; 1
    11f2:	91 f0       	breq	.+36     	; 0x1218 <__fixunssfsi+0x4c>
    11f4:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_zero>
    11f8:	b1 e0       	ldi	r27, 0x01	; 1
    11fa:	08 95       	ret
    11fc:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__fp_zero>
    1200:	67 2f       	mov	r22, r23
    1202:	78 2f       	mov	r23, r24
    1204:	88 27       	eor	r24, r24
    1206:	b8 5f       	subi	r27, 0xF8	; 248
    1208:	39 f0       	breq	.+14     	; 0x1218 <__fixunssfsi+0x4c>
    120a:	b9 3f       	cpi	r27, 0xF9	; 249
    120c:	cc f3       	brlt	.-14     	; 0x1200 <__fixunssfsi+0x34>
    120e:	86 95       	lsr	r24
    1210:	77 95       	ror	r23
    1212:	67 95       	ror	r22
    1214:	b3 95       	inc	r27
    1216:	d9 f7       	brne	.-10     	; 0x120e <__fixunssfsi+0x42>
    1218:	3e f4       	brtc	.+14     	; 0x1228 <__fixunssfsi+0x5c>
    121a:	90 95       	com	r25
    121c:	80 95       	com	r24
    121e:	70 95       	com	r23
    1220:	61 95       	neg	r22
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	8f 4f       	sbci	r24, 0xFF	; 255
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	08 95       	ret

0000122a <__floatunsisf>:
    122a:	e8 94       	clt
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <__floatsisf+0x12>

0000122e <__floatsisf>:
    122e:	97 fb       	bst	r25, 7
    1230:	3e f4       	brtc	.+14     	; 0x1240 <__floatsisf+0x12>
    1232:	90 95       	com	r25
    1234:	80 95       	com	r24
    1236:	70 95       	com	r23
    1238:	61 95       	neg	r22
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	8f 4f       	sbci	r24, 0xFF	; 255
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	99 23       	and	r25, r25
    1242:	a9 f0       	breq	.+42     	; 0x126e <__floatsisf+0x40>
    1244:	f9 2f       	mov	r31, r25
    1246:	96 e9       	ldi	r25, 0x96	; 150
    1248:	bb 27       	eor	r27, r27
    124a:	93 95       	inc	r25
    124c:	f6 95       	lsr	r31
    124e:	87 95       	ror	r24
    1250:	77 95       	ror	r23
    1252:	67 95       	ror	r22
    1254:	b7 95       	ror	r27
    1256:	f1 11       	cpse	r31, r1
    1258:	f8 cf       	rjmp	.-16     	; 0x124a <__floatsisf+0x1c>
    125a:	fa f4       	brpl	.+62     	; 0x129a <__floatsisf+0x6c>
    125c:	bb 0f       	add	r27, r27
    125e:	11 f4       	brne	.+4      	; 0x1264 <__floatsisf+0x36>
    1260:	60 ff       	sbrs	r22, 0
    1262:	1b c0       	rjmp	.+54     	; 0x129a <__floatsisf+0x6c>
    1264:	6f 5f       	subi	r22, 0xFF	; 255
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	8f 4f       	sbci	r24, 0xFF	; 255
    126a:	9f 4f       	sbci	r25, 0xFF	; 255
    126c:	16 c0       	rjmp	.+44     	; 0x129a <__floatsisf+0x6c>
    126e:	88 23       	and	r24, r24
    1270:	11 f0       	breq	.+4      	; 0x1276 <__floatsisf+0x48>
    1272:	96 e9       	ldi	r25, 0x96	; 150
    1274:	11 c0       	rjmp	.+34     	; 0x1298 <__floatsisf+0x6a>
    1276:	77 23       	and	r23, r23
    1278:	21 f0       	breq	.+8      	; 0x1282 <__floatsisf+0x54>
    127a:	9e e8       	ldi	r25, 0x8E	; 142
    127c:	87 2f       	mov	r24, r23
    127e:	76 2f       	mov	r23, r22
    1280:	05 c0       	rjmp	.+10     	; 0x128c <__floatsisf+0x5e>
    1282:	66 23       	and	r22, r22
    1284:	71 f0       	breq	.+28     	; 0x12a2 <__floatsisf+0x74>
    1286:	96 e8       	ldi	r25, 0x86	; 134
    1288:	86 2f       	mov	r24, r22
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	2a f0       	brmi	.+10     	; 0x129a <__floatsisf+0x6c>
    1290:	9a 95       	dec	r25
    1292:	66 0f       	add	r22, r22
    1294:	77 1f       	adc	r23, r23
    1296:	88 1f       	adc	r24, r24
    1298:	da f7       	brpl	.-10     	; 0x1290 <__floatsisf+0x62>
    129a:	88 0f       	add	r24, r24
    129c:	96 95       	lsr	r25
    129e:	87 95       	ror	r24
    12a0:	97 f9       	bld	r25, 7
    12a2:	08 95       	ret

000012a4 <__fp_cmp>:
    12a4:	99 0f       	add	r25, r25
    12a6:	00 08       	sbc	r0, r0
    12a8:	55 0f       	add	r21, r21
    12aa:	aa 0b       	sbc	r26, r26
    12ac:	e0 e8       	ldi	r30, 0x80	; 128
    12ae:	fe ef       	ldi	r31, 0xFE	; 254
    12b0:	16 16       	cp	r1, r22
    12b2:	17 06       	cpc	r1, r23
    12b4:	e8 07       	cpc	r30, r24
    12b6:	f9 07       	cpc	r31, r25
    12b8:	c0 f0       	brcs	.+48     	; 0x12ea <__fp_cmp+0x46>
    12ba:	12 16       	cp	r1, r18
    12bc:	13 06       	cpc	r1, r19
    12be:	e4 07       	cpc	r30, r20
    12c0:	f5 07       	cpc	r31, r21
    12c2:	98 f0       	brcs	.+38     	; 0x12ea <__fp_cmp+0x46>
    12c4:	62 1b       	sub	r22, r18
    12c6:	73 0b       	sbc	r23, r19
    12c8:	84 0b       	sbc	r24, r20
    12ca:	95 0b       	sbc	r25, r21
    12cc:	39 f4       	brne	.+14     	; 0x12dc <__fp_cmp+0x38>
    12ce:	0a 26       	eor	r0, r26
    12d0:	61 f0       	breq	.+24     	; 0x12ea <__fp_cmp+0x46>
    12d2:	23 2b       	or	r18, r19
    12d4:	24 2b       	or	r18, r20
    12d6:	25 2b       	or	r18, r21
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <__fp_cmp+0x3e>
    12da:	08 95       	ret
    12dc:	0a 26       	eor	r0, r26
    12de:	09 f4       	brne	.+2      	; 0x12e2 <__fp_cmp+0x3e>
    12e0:	a1 40       	sbci	r26, 0x01	; 1
    12e2:	a6 95       	lsr	r26
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	81 1d       	adc	r24, r1
    12e8:	81 1d       	adc	r24, r1
    12ea:	08 95       	ret

000012ec <__fp_inf>:
    12ec:	97 f9       	bld	r25, 7
    12ee:	9f 67       	ori	r25, 0x7F	; 127
    12f0:	80 e8       	ldi	r24, 0x80	; 128
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	08 95       	ret

000012f8 <__fp_nan>:
    12f8:	9f ef       	ldi	r25, 0xFF	; 255
    12fa:	80 ec       	ldi	r24, 0xC0	; 192
    12fc:	08 95       	ret

000012fe <__fp_pscA>:
    12fe:	00 24       	eor	r0, r0
    1300:	0a 94       	dec	r0
    1302:	16 16       	cp	r1, r22
    1304:	17 06       	cpc	r1, r23
    1306:	18 06       	cpc	r1, r24
    1308:	09 06       	cpc	r0, r25
    130a:	08 95       	ret

0000130c <__fp_pscB>:
    130c:	00 24       	eor	r0, r0
    130e:	0a 94       	dec	r0
    1310:	12 16       	cp	r1, r18
    1312:	13 06       	cpc	r1, r19
    1314:	14 06       	cpc	r1, r20
    1316:	05 06       	cpc	r0, r21
    1318:	08 95       	ret

0000131a <__fp_round>:
    131a:	09 2e       	mov	r0, r25
    131c:	03 94       	inc	r0
    131e:	00 0c       	add	r0, r0
    1320:	11 f4       	brne	.+4      	; 0x1326 <__fp_round+0xc>
    1322:	88 23       	and	r24, r24
    1324:	52 f0       	brmi	.+20     	; 0x133a <__fp_round+0x20>
    1326:	bb 0f       	add	r27, r27
    1328:	40 f4       	brcc	.+16     	; 0x133a <__fp_round+0x20>
    132a:	bf 2b       	or	r27, r31
    132c:	11 f4       	brne	.+4      	; 0x1332 <__fp_round+0x18>
    132e:	60 ff       	sbrs	r22, 0
    1330:	04 c0       	rjmp	.+8      	; 0x133a <__fp_round+0x20>
    1332:	6f 5f       	subi	r22, 0xFF	; 255
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	8f 4f       	sbci	r24, 0xFF	; 255
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	08 95       	ret

0000133c <__fp_split3>:
    133c:	57 fd       	sbrc	r21, 7
    133e:	90 58       	subi	r25, 0x80	; 128
    1340:	44 0f       	add	r20, r20
    1342:	55 1f       	adc	r21, r21
    1344:	59 f0       	breq	.+22     	; 0x135c <__fp_splitA+0x10>
    1346:	5f 3f       	cpi	r21, 0xFF	; 255
    1348:	71 f0       	breq	.+28     	; 0x1366 <__fp_splitA+0x1a>
    134a:	47 95       	ror	r20

0000134c <__fp_splitA>:
    134c:	88 0f       	add	r24, r24
    134e:	97 fb       	bst	r25, 7
    1350:	99 1f       	adc	r25, r25
    1352:	61 f0       	breq	.+24     	; 0x136c <__fp_splitA+0x20>
    1354:	9f 3f       	cpi	r25, 0xFF	; 255
    1356:	79 f0       	breq	.+30     	; 0x1376 <__fp_splitA+0x2a>
    1358:	87 95       	ror	r24
    135a:	08 95       	ret
    135c:	12 16       	cp	r1, r18
    135e:	13 06       	cpc	r1, r19
    1360:	14 06       	cpc	r1, r20
    1362:	55 1f       	adc	r21, r21
    1364:	f2 cf       	rjmp	.-28     	; 0x134a <__fp_split3+0xe>
    1366:	46 95       	lsr	r20
    1368:	f1 df       	rcall	.-30     	; 0x134c <__fp_splitA>
    136a:	08 c0       	rjmp	.+16     	; 0x137c <__fp_splitA+0x30>
    136c:	16 16       	cp	r1, r22
    136e:	17 06       	cpc	r1, r23
    1370:	18 06       	cpc	r1, r24
    1372:	99 1f       	adc	r25, r25
    1374:	f1 cf       	rjmp	.-30     	; 0x1358 <__fp_splitA+0xc>
    1376:	86 95       	lsr	r24
    1378:	71 05       	cpc	r23, r1
    137a:	61 05       	cpc	r22, r1
    137c:	08 94       	sec
    137e:	08 95       	ret

00001380 <__fp_zero>:
    1380:	e8 94       	clt

00001382 <__fp_szero>:
    1382:	bb 27       	eor	r27, r27
    1384:	66 27       	eor	r22, r22
    1386:	77 27       	eor	r23, r23
    1388:	cb 01       	movw	r24, r22
    138a:	97 f9       	bld	r25, 7
    138c:	08 95       	ret

0000138e <__gesf2>:
    138e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__fp_cmp>
    1392:	08 f4       	brcc	.+2      	; 0x1396 <__gesf2+0x8>
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	08 95       	ret

00001398 <__mulsf3>:
    1398:	0e 94 df 09 	call	0x13be	; 0x13be <__mulsf3x>
    139c:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__fp_round>
    13a0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fp_pscA>
    13a4:	38 f0       	brcs	.+14     	; 0x13b4 <__mulsf3+0x1c>
    13a6:	0e 94 86 09 	call	0x130c	; 0x130c <__fp_pscB>
    13aa:	20 f0       	brcs	.+8      	; 0x13b4 <__mulsf3+0x1c>
    13ac:	95 23       	and	r25, r21
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <__mulsf3+0x1c>
    13b0:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__fp_inf>
    13b4:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__fp_nan>
    13b8:	11 24       	eor	r1, r1
    13ba:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>

000013be <__mulsf3x>:
    13be:	0e 94 9e 09 	call	0x133c	; 0x133c <__fp_split3>
    13c2:	70 f3       	brcs	.-36     	; 0x13a0 <__mulsf3+0x8>

000013c4 <__mulsf3_pse>:
    13c4:	95 9f       	mul	r25, r21
    13c6:	c1 f3       	breq	.-16     	; 0x13b8 <__mulsf3+0x20>
    13c8:	95 0f       	add	r25, r21
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	55 1f       	adc	r21, r21
    13ce:	62 9f       	mul	r22, r18
    13d0:	f0 01       	movw	r30, r0
    13d2:	72 9f       	mul	r23, r18
    13d4:	bb 27       	eor	r27, r27
    13d6:	f0 0d       	add	r31, r0
    13d8:	b1 1d       	adc	r27, r1
    13da:	63 9f       	mul	r22, r19
    13dc:	aa 27       	eor	r26, r26
    13de:	f0 0d       	add	r31, r0
    13e0:	b1 1d       	adc	r27, r1
    13e2:	aa 1f       	adc	r26, r26
    13e4:	64 9f       	mul	r22, r20
    13e6:	66 27       	eor	r22, r22
    13e8:	b0 0d       	add	r27, r0
    13ea:	a1 1d       	adc	r26, r1
    13ec:	66 1f       	adc	r22, r22
    13ee:	82 9f       	mul	r24, r18
    13f0:	22 27       	eor	r18, r18
    13f2:	b0 0d       	add	r27, r0
    13f4:	a1 1d       	adc	r26, r1
    13f6:	62 1f       	adc	r22, r18
    13f8:	73 9f       	mul	r23, r19
    13fa:	b0 0d       	add	r27, r0
    13fc:	a1 1d       	adc	r26, r1
    13fe:	62 1f       	adc	r22, r18
    1400:	83 9f       	mul	r24, r19
    1402:	a0 0d       	add	r26, r0
    1404:	61 1d       	adc	r22, r1
    1406:	22 1f       	adc	r18, r18
    1408:	74 9f       	mul	r23, r20
    140a:	33 27       	eor	r19, r19
    140c:	a0 0d       	add	r26, r0
    140e:	61 1d       	adc	r22, r1
    1410:	23 1f       	adc	r18, r19
    1412:	84 9f       	mul	r24, r20
    1414:	60 0d       	add	r22, r0
    1416:	21 1d       	adc	r18, r1
    1418:	82 2f       	mov	r24, r18
    141a:	76 2f       	mov	r23, r22
    141c:	6a 2f       	mov	r22, r26
    141e:	11 24       	eor	r1, r1
    1420:	9f 57       	subi	r25, 0x7F	; 127
    1422:	50 40       	sbci	r21, 0x00	; 0
    1424:	9a f0       	brmi	.+38     	; 0x144c <__mulsf3_pse+0x88>
    1426:	f1 f0       	breq	.+60     	; 0x1464 <__mulsf3_pse+0xa0>
    1428:	88 23       	and	r24, r24
    142a:	4a f0       	brmi	.+18     	; 0x143e <__mulsf3_pse+0x7a>
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	bb 1f       	adc	r27, r27
    1432:	66 1f       	adc	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	91 50       	subi	r25, 0x01	; 1
    143a:	50 40       	sbci	r21, 0x00	; 0
    143c:	a9 f7       	brne	.-22     	; 0x1428 <__mulsf3_pse+0x64>
    143e:	9e 3f       	cpi	r25, 0xFE	; 254
    1440:	51 05       	cpc	r21, r1
    1442:	80 f0       	brcs	.+32     	; 0x1464 <__mulsf3_pse+0xa0>
    1444:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__fp_inf>
    1448:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	e4 f3       	brlt	.-8      	; 0x1448 <__mulsf3_pse+0x84>
    1450:	98 3e       	cpi	r25, 0xE8	; 232
    1452:	d4 f3       	brlt	.-12     	; 0x1448 <__mulsf3_pse+0x84>
    1454:	86 95       	lsr	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	b7 95       	ror	r27
    145c:	f7 95       	ror	r31
    145e:	e7 95       	ror	r30
    1460:	9f 5f       	subi	r25, 0xFF	; 255
    1462:	c1 f7       	brne	.-16     	; 0x1454 <__mulsf3_pse+0x90>
    1464:	fe 2b       	or	r31, r30
    1466:	88 0f       	add	r24, r24
    1468:	91 1d       	adc	r25, r1
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <_exit>:
    1472:	f8 94       	cli

00001474 <__stop_program>:
    1474:	ff cf       	rjmp	.-2      	; 0x1474 <__stop_program>
